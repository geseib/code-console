{"ast":null,"code":"/**\n * File System Service\n * \n * This module provides functions to interact with the file system.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll use simulated data based on the current project structure.\n */\n\n// Import axios for HTTP requests\nimport axios from 'axios';\n\n// Import virtualFileSystem from terminalService to share the same filesystem\nimport { getVirtualFileSystem } from './terminalService';\n\n// Base directory for the file system\n// In a real app, this would be configurable or set by the backend\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n/**\n * List files and directories in a path\n * @param {string} path - Path relative to the base directory\n * @returns {Promise<Array>} - Array of file and directory objects\n */\nexport const listFiles = async (path = '') => {\n  try {\n    // In a real app, this would be an API call\n    // For demo purposes, we'll return mock data based on the path\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // For now, return structured mock data\n    // Later we'll implement actual file system access\n    const fullPath = path ? `${BASE_DIRECTORY}/${path}` : BASE_DIRECTORY;\n\n    // This would be a real API call in production\n    // const response = await axios.get('/api/files', { params: { path: fullPath } });\n    // return response.data;\n\n    // Get the virtual filesystem\n    const vfs = getVirtualFileSystem();\n\n    // Get all subdirectories directly under the specified path\n    const directSubdirs = vfs.directories.filter(dir => {\n      if (path === '') {\n        // For root directory, get top-level dirs (no slashes)\n        return dir !== '' && !dir.includes('/');\n      } else {\n        // For other directories, get direct children\n        return dir !== path && dir.startsWith(path + '/') && dir.substring(path.length + 1).indexOf('/') === -1;\n      }\n    }).map(dir => {\n      return {\n        name: path === '' ? dir : dir.substring(path.length + 1),\n        type: 'folder',\n        path: dir\n      };\n    });\n\n    // Get all files directly under the specified path\n    const directFiles = Object.keys(vfs.files).filter(file => {\n      if (path === '') {\n        // For root directory, get top-level files (no slashes)\n        return !file.includes('/');\n      } else {\n        // For other directories, get direct children\n        return file.startsWith(path + '/') && file.substring(path.length + 1).indexOf('/') === -1;\n      }\n    }).map(file => {\n      return {\n        name: path === '' ? file : file.substring(path.length + 1),\n        type: 'file',\n        path: file\n      };\n    });\n\n    // Combine directories and files\n    return [...directSubdirs, ...directFiles];\n  } catch (error) {\n    console.error('Error listing files:', error);\n    throw new Error('Failed to list files');\n  }\n};\n\n/**\n * Read file content\n * @param {string} path - Path to the file relative to the base directory\n * @returns {Promise<string>} - File content\n */\nexport const readFile = async filePath => {\n  try {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n    const fullPath = `${BASE_DIRECTORY}/${filePath}`;\n\n    // This would be a real API call in production\n    // const response = await axios.get('/api/files/content', { params: { path: fullPath } });\n    // return response.data;\n\n    // Get the virtual filesystem\n    const vfs = getVirtualFileSystem();\n\n    // Check if file exists in the virtual filesystem\n    if (filePath in vfs.files) {\n      return vfs.files[filePath];\n    }\n    throw new Error(`File ${filePath} not found`);\n  } catch (error) {\n    console.error('Error reading file:', error);\n    throw new Error('Failed to read file');\n  }\n};\n\n/**\n * Generate mock file list based on path\n * @param {string} fullPath - Full system path\n * @param {string} relativePath - Path relative to base directory\n * @returns {Array} - Array of file and directory objects\n */\nfunction generateMockFileList(fullPath, relativePath) {\n  // For demo purposes, we'll create a realistic file structure based on our project\n\n  // Root directory\n  if (!relativePath) {\n    return [{\n      name: 'public',\n      type: 'folder',\n      path: 'public'\n    }, {\n      name: 'src',\n      type: 'folder',\n      path: 'src'\n    }, {\n      name: 'package.json',\n      type: 'file',\n      path: 'package.json'\n    }, {\n      name: 'README.md',\n      type: 'file',\n      path: 'README.md'\n    }, {\n      name: 'node_modules',\n      type: 'folder',\n      path: 'node_modules'\n    }];\n  }\n\n  // src directory\n  if (relativePath === 'src') {\n    return [{\n      name: 'components',\n      type: 'folder',\n      path: 'src/components'\n    }, {\n      name: 'services',\n      type: 'folder',\n      path: 'src/services'\n    }, {\n      name: 'App.js',\n      type: 'file',\n      path: 'src/App.js'\n    }, {\n      name: 'index.js',\n      type: 'file',\n      path: 'src/index.js'\n    }, {\n      name: 'index.css',\n      type: 'file',\n      path: 'src/index.css'\n    }];\n  }\n\n  // src/components directory\n  if (relativePath === 'src/components') {\n    return [{\n      name: 'ChatWindow.js',\n      type: 'file',\n      path: 'src/components/ChatWindow.js'\n    }, {\n      name: 'FileViewer.js',\n      type: 'file',\n      path: 'src/components/FileViewer.js'\n    }, {\n      name: 'Terminal.js',\n      type: 'file',\n      path: 'src/components/Terminal.js'\n    }];\n  }\n\n  // src/services directory\n  if (relativePath === 'src/services') {\n    return [{\n      name: 'fileService.js',\n      type: 'file',\n      path: 'src/services/fileService.js'\n    }];\n  }\n\n  // public directory\n  if (relativePath === 'public') {\n    return [{\n      name: 'index.html',\n      type: 'file',\n      path: 'public/index.html'\n    }];\n  }\n\n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/App.js': `import React from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components/ChatWindow';\nimport FileViewer from './components/FileViewer';\nimport Terminal from './components/Terminal';\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ChatContainer>\n        <ChatWindow />\n      </ChatContainer>\n      <FileViewerContainer>\n        <FileViewer />\n      </FileViewerContainer>\n      <TerminalContainer>\n        <Terminal />\n      </TerminalContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`\n  };\n\n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}\n\n/**\n * Get a list of recently modified files\n * @returns {Promise<Array>} - Array of recent file objects\n */\nexport const getRecentFiles = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  // Return a mock list of recent files\n  return [{\n    name: 'FileViewer.js',\n    type: 'file',\n    path: 'src/components/FileViewer.js'\n  }, {\n    name: 'App.js',\n    type: 'file',\n    path: 'src/App.js'\n  }, {\n    name: 'index.js',\n    type: 'file',\n    path: 'src/index.js'\n  }, {\n    name: 'package.json',\n    type: 'file',\n    path: 'package.json'\n  }];\n};","map":{"version":3,"names":["axios","getVirtualFileSystem","BASE_DIRECTORY","listFiles","path","Promise","resolve","setTimeout","fullPath","vfs","directSubdirs","directories","filter","dir","includes","startsWith","substring","length","indexOf","map","name","type","directFiles","Object","keys","files","file","error","console","Error","readFile","filePath","generateMockFileList","relativePath","getMockFileContent","fileContents","getRecentFiles"],"sources":["/Users/georgeseib/Documents/projects/cc/third/src/services/fileService.js"],"sourcesContent":["/**\n * File System Service\n * \n * This module provides functions to interact with the file system.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll use simulated data based on the current project structure.\n */\n\n// Import axios for HTTP requests\nimport axios from 'axios';\n\n// Import virtualFileSystem from terminalService to share the same filesystem\nimport { getVirtualFileSystem } from './terminalService';\n\n// Base directory for the file system\n// In a real app, this would be configurable or set by the backend\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n/**\n * List files and directories in a path\n * @param {string} path - Path relative to the base directory\n * @returns {Promise<Array>} - Array of file and directory objects\n */\nexport const listFiles = async (path = '') => {\n  try {\n    // In a real app, this would be an API call\n    // For demo purposes, we'll return mock data based on the path\n    \n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // For now, return structured mock data\n    // Later we'll implement actual file system access\n    const fullPath = path ? `${BASE_DIRECTORY}/${path}` : BASE_DIRECTORY;\n    \n    // This would be a real API call in production\n    // const response = await axios.get('/api/files', { params: { path: fullPath } });\n    // return response.data;\n    \n    // Get the virtual filesystem\n    const vfs = getVirtualFileSystem();\n    \n    // Get all subdirectories directly under the specified path\n    const directSubdirs = vfs.directories.filter(dir => {\n      if (path === '') {\n        // For root directory, get top-level dirs (no slashes)\n        return dir !== '' && !dir.includes('/');\n      } else {\n        // For other directories, get direct children\n        return dir !== path && \n              dir.startsWith(path + '/') && \n              dir.substring(path.length + 1).indexOf('/') === -1;\n      }\n    }).map(dir => {\n      return {\n        name: path === '' ? dir : dir.substring(path.length + 1),\n        type: 'folder',\n        path: dir\n      };\n    });\n    \n    // Get all files directly under the specified path\n    const directFiles = Object.keys(vfs.files).filter(file => {\n      if (path === '') {\n        // For root directory, get top-level files (no slashes)\n        return !file.includes('/');\n      } else {\n        // For other directories, get direct children\n        return file.startsWith(path + '/') && \n              file.substring(path.length + 1).indexOf('/') === -1;\n      }\n    }).map(file => {\n      return {\n        name: path === '' ? file : file.substring(path.length + 1),\n        type: 'file',\n        path: file\n      };\n    });\n    \n    // Combine directories and files\n    return [...directSubdirs, ...directFiles];\n    \n  } catch (error) {\n    console.error('Error listing files:', error);\n    throw new Error('Failed to list files');\n  }\n};\n\n/**\n * Read file content\n * @param {string} path - Path to the file relative to the base directory\n * @returns {Promise<string>} - File content\n */\nexport const readFile = async (filePath) => {\n  try {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const fullPath = `${BASE_DIRECTORY}/${filePath}`;\n    \n    // This would be a real API call in production\n    // const response = await axios.get('/api/files/content', { params: { path: fullPath } });\n    // return response.data;\n    \n    // Get the virtual filesystem\n    const vfs = getVirtualFileSystem();\n    \n    // Check if file exists in the virtual filesystem\n    if (filePath in vfs.files) {\n      return vfs.files[filePath];\n    }\n    \n    throw new Error(`File ${filePath} not found`);\n  } catch (error) {\n    console.error('Error reading file:', error);\n    throw new Error('Failed to read file');\n  }\n};\n\n/**\n * Generate mock file list based on path\n * @param {string} fullPath - Full system path\n * @param {string} relativePath - Path relative to base directory\n * @returns {Array} - Array of file and directory objects\n */\nfunction generateMockFileList(fullPath, relativePath) {\n  // For demo purposes, we'll create a realistic file structure based on our project\n  \n  // Root directory\n  if (!relativePath) {\n    return [\n      { name: 'public', type: 'folder', path: 'public' },\n      { name: 'src', type: 'folder', path: 'src' },\n      { name: 'package.json', type: 'file', path: 'package.json' },\n      { name: 'README.md', type: 'file', path: 'README.md' },\n      { name: 'node_modules', type: 'folder', path: 'node_modules' },\n    ];\n  }\n  \n  // src directory\n  if (relativePath === 'src') {\n    return [\n      { name: 'components', type: 'folder', path: 'src/components' },\n      { name: 'services', type: 'folder', path: 'src/services' },\n      { name: 'App.js', type: 'file', path: 'src/App.js' },\n      { name: 'index.js', type: 'file', path: 'src/index.js' },\n      { name: 'index.css', type: 'file', path: 'src/index.css' },\n    ];\n  }\n  \n  // src/components directory\n  if (relativePath === 'src/components') {\n    return [\n      { name: 'ChatWindow.js', type: 'file', path: 'src/components/ChatWindow.js' },\n      { name: 'FileViewer.js', type: 'file', path: 'src/components/FileViewer.js' },\n      { name: 'Terminal.js', type: 'file', path: 'src/components/Terminal.js' },\n    ];\n  }\n  \n  // src/services directory\n  if (relativePath === 'src/services') {\n    return [\n      { name: 'fileService.js', type: 'file', path: 'src/services/fileService.js' },\n    ];\n  }\n  \n  // public directory\n  if (relativePath === 'public') {\n    return [\n      { name: 'index.html', type: 'file', path: 'public/index.html' },\n    ];\n  }\n  \n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/App.js': `import React from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components/ChatWindow';\nimport FileViewer from './components/FileViewer';\nimport Terminal from './components/Terminal';\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ChatContainer>\n        <ChatWindow />\n      </ChatContainer>\n      <FileViewerContainer>\n        <FileViewer />\n      </FileViewerContainer>\n      <TerminalContainer>\n        <Terminal />\n      </TerminalContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`,\n  };\n  \n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}\n\n/**\n * Get a list of recently modified files\n * @returns {Promise<Array>} - Array of recent file objects\n */\nexport const getRecentFiles = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  // Return a mock list of recent files\n  return [\n    { name: 'FileViewer.js', type: 'file', path: 'src/components/FileViewer.js' },\n    { name: 'App.js', type: 'file', path: 'src/App.js' },\n    { name: 'index.js', type: 'file', path: 'src/index.js' },\n    { name: 'package.json', type: 'file', path: 'package.json' },\n  ];\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}