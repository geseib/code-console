{"ast":null,"code":"/**\n * Terminal Service\n * \n * This module provides functions to interact with a simulated shell.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll simulate shell commands and responses.\n */\n\n// Base directory for the file system - should match what's used in fileService\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n// In-memory filesystem to track created/modified files and directories\nconst virtualFileSystem = {\n  // Initial directories\n  directories: ['',\n  // Root\n  'src', 'src/components', 'src/services', 'public', 'node_modules'],\n  // Initial files with their content\n  files: {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'src/App.js': `import React from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components/ChatWindow';\nimport FileViewer from './components/FileViewer';\nimport Terminal from './components/Terminal';\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ChatContainer>\n        <ChatWindow />\n      </ChatContainer>\n      <FileViewerContainer>\n        <FileViewer />\n      </FileViewerContainer>\n      <TerminalContainer>\n        <Terminal />\n      </TerminalContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;`,\n    'src/index.css': `body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}`,\n    'src/components/ChatWindow.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// Chat window component implementation\nexport default function ChatWindow() {\n  return <div>Chat Window</div>;\n}`,\n    'src/components/FileViewer.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// File viewer component implementation\nexport default function FileViewer() {\n  return <div>File Viewer</div>;\n}`,\n    'src/components/Terminal.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// Terminal component implementation\nexport default function Terminal() {\n  return <div>Terminal</div>;\n}`,\n    'src/services/fileService.js': `// File service implementation`,\n    'src/services/terminalService.js': `// Terminal service implementation`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`\n  }\n};\n\n/**\n * Execute a shell command\n * @param {string} command - Command to execute\n * @param {string} currentDirectory - Current working directory\n * @returns {Promise<{output: string, newDirectory: string}>} - Command output and new working directory\n */\nexport const executeCommand = async (command, currentDirectory = '') => {\n  // In a real implementation, this would call a backend API\n  // For demo purposes, we'll simulate responses to common commands\n\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 100));\n\n  // Trim command\n  command = command.trim();\n\n  // Determine the full path of the current directory\n  const workingDir = currentDirectory || '';\n  const fullPath = workingDir ? `${BASE_DIRECTORY}/${workingDir}` : BASE_DIRECTORY;\n\n  // Parse command and arguments - handle quoted arguments properly\n  const args = parseCommandArgs(command);\n  const cmd = args.length > 0 ? args[0].toLowerCase() : '';\n\n  // Track the new directory (changes if cd is used)\n  let newDirectory = currentDirectory;\n\n  // Simulate command execution\n  let output = '';\n  try {\n    // Handle different commands\n    switch (cmd) {\n      // File system navigation\n      case 'ls':\n        output = simulateLS(args, workingDir);\n        break;\n      case 'cd':\n        const cdResult = simulateCD(args, workingDir);\n        output = cdResult.output;\n        newDirectory = cdResult.newDirectory;\n        break;\n      case 'pwd':\n        output = simulatePWD(workingDir);\n        break;\n\n      // File operations\n      case 'cat':\n        output = simulateCAT(args, workingDir);\n        break;\n      case 'touch':\n        output = simulateTOUCH(args, workingDir);\n        break;\n      case 'mkdir':\n        output = simulateMKDIR(args, workingDir);\n        break;\n      case 'rm':\n        output = simulateRM(args, workingDir);\n        break;\n      case 'cp':\n        output = simulateCP(args, workingDir);\n        break;\n      case 'mv':\n        output = simulateMV(args, workingDir);\n        break;\n      case 'find':\n        output = simulateFIND(args, workingDir);\n        break;\n      case 'grep':\n        output = simulateGREP(args, workingDir);\n        break;\n\n      // Text output\n      case 'echo':\n        output = simulateECHO(args);\n        break;\n\n      // External tools\n      case 'npm':\n        output = simulateNPM(args, workingDir);\n        break;\n      case 'node':\n        output = simulateNODE(args, workingDir);\n        break;\n      case 'gh':\n        output = simulateGH(args, workingDir);\n        break;\n      case 'git':\n        output = simulateGit(args, workingDir);\n        break;\n\n      // System commands\n      case 'ps':\n        output = simulatePS(args);\n        break;\n      case 'whoami':\n        output = 'user';\n        break;\n      case 'date':\n        output = new Date().toString();\n        break;\n      case 'help':\n        output = getHelpText();\n        break;\n      case 'man':\n        output = simulateMAN(args);\n        break;\n      case 'clear':\n        // The clear command returns a special signal to clear the terminal\n        return {\n          output: 'CLEAR_TERMINAL',\n          newDirectory\n        };\n      case '':\n        // Empty command, do nothing\n        output = '';\n        break;\n      default:\n        // Check if this is an executable file in the current directory\n        if (fileExists(`${workingDir ? workingDir + '/' : ''}${cmd}`)) {\n          output = `Simulated execution of ${cmd}`;\n        } else {\n          output = `Command not found: ${cmd}\\nType 'help' to see available commands.`;\n        }\n    }\n  } catch (error) {\n    output = `Error: ${error.message}`;\n  }\n  return {\n    output,\n    newDirectory\n  };\n};\n\n/**\n * Simulate the 'ls' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateLS(args, workingDir) {\n  // Check for -l flag\n  const isLongFormat = args.includes('-l');\n\n  // Get mock file listing based on the current directory\n  const files = getMockFileListing(workingDir);\n  if (isLongFormat) {\n    // Format like a real ls -l command\n    return files.map(file => {\n      const isDir = file.type === 'folder';\n      const permissions = isDir ? 'drwxr-xr-x' : '-rw-r--r--';\n      const size = isDir ? 4096 : Math.floor(Math.random() * 10000);\n      const date = new Date().toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      return `${permissions} 1 user group ${size.toString().padStart(6)} ${date} ${file.name}${isDir ? '/' : ''}`;\n    }).join('\\n');\n  } else {\n    // Simple format\n    return files.map(file => {\n      return file.type === 'folder' ? `${file.name}/` : file.name;\n    }).join('  ');\n  }\n}\n\n/**\n * Simulate the 'cd' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {{output: string, newDirectory: string}} - Command output and new working directory\n */\nfunction simulateCD(args, workingDir) {\n  if (args.length < 2) {\n    // cd without arguments goes to home directory\n    return {\n      output: '',\n      newDirectory: ''\n    };\n  }\n  const target = args[1];\n  if (target === '..') {\n    // Go up one directory\n    if (!workingDir || !workingDir.includes('/')) {\n      return {\n        output: '',\n        newDirectory: ''\n      };\n    }\n    const newDir = workingDir.substring(0, workingDir.lastIndexOf('/'));\n    return {\n      output: '',\n      newDirectory: newDir\n    };\n  }\n  if (target === '.') {\n    // Stay in current directory\n    return {\n      output: '',\n      newDirectory: workingDir\n    };\n  }\n  if (target.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    const newDir = target.substring(1); // Remove leading slash\n\n    // Check if directory exists\n    if (directoryExists(newDir)) {\n      return {\n        output: '',\n        newDirectory: newDir\n      };\n    } else {\n      return {\n        output: `cd: ${target}: No such file or directory`,\n        newDirectory: workingDir\n      };\n    }\n  }\n\n  // Relative path\n  const newDir = workingDir ? `${workingDir}/${target}` : target;\n\n  // Check if directory exists\n  if (directoryExists(newDir)) {\n    return {\n      output: '',\n      newDirectory: newDir\n    };\n  } else {\n    return {\n      output: `cd: ${target}: No such file or directory`,\n      newDirectory: workingDir\n    };\n  }\n}\n\n/**\n * Simulate the 'pwd' command\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulatePWD(workingDir) {\n  return workingDir ? `/${workingDir}` : '/';\n}\n\n/**\n * Simulate the 'cat' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCAT(args, workingDir) {\n  if (args.length < 2) {\n    return 'cat: missing file operand';\n  }\n  const filename = args[1];\n  const path = resolveFilePath(filename, workingDir);\n\n  // Check if file exists\n  if (fileExists(path)) {\n    return getMockFileContent(path);\n  } else {\n    return `cat: ${filename}: No such file or directory`;\n  }\n}\n\n/**\n * Simulate the 'mkdir' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMKDIR(args, workingDir) {\n  if (args.length < 2) {\n    return 'mkdir: missing operand';\n  }\n\n  // In a real implementation, this would create the directory\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'npm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNPM(args, workingDir) {\n  if (args.length < 2) {\n    return 'npm: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'start':\n      return 'Starting development server...\\n\\nCompiled successfully!\\n\\nYou can now view the app in the browser.\\n\\n  Local:            http://localhost:3000\\n  On Your Network:  http://192.168.0.45:3000';\n    case 'test':\n      return 'PASS  src/__tests__/app.test.js\\nPASS  src/__tests__/components.test.js\\n\\nTest Suites: 2 passed, 2 total\\nTests:       7 passed, 7 total\\nSnapshots:   0 total\\nTime:        1.234s';\n    case 'build':\n      return 'Creating an optimized production build...\\nCompiled successfully.\\n\\nFile sizes after gzip:\\n\\n  142.32 KB  build/static/js/main.a1b2c3d4.js\\n  23.45 KB   build/static/css/main.a1b2c3d4.css';\n    case 'install':\n      const packageName = args.length > 2 ? args[2] : '';\n      if (packageName) {\n        return `+ ${packageName}@1.2.3\\nadded 42 packages from 23 contributors in 2.5s`;\n      } else {\n        return 'added 1344 packages in 30s';\n      }\n    default:\n      return `Unknown npm command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'gh' (GitHub CLI) command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGH(args, workingDir) {\n  if (args.length < 2) {\n    return 'gh: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'pr':\n      if (args.length < 3) {\n        return 'gh pr: missing subcommand';\n      }\n      const prSubCommand = args[2];\n      switch (prSubCommand) {\n        case 'list':\n          return 'Showing 2 of 2 open pull requests in username/repo\\n\\n#42  Update documentation  user1  [feature/docs]  1d\\n#41  Fix terminal component  user2  [bugfix/terminal]  2d';\n        case 'create':\n          return 'Creating pull request for feature-branch into main in username/repo\\n\\nPull request created: https://github.com/username/repo/pull/43';\n        default:\n          return `Unknown gh pr command: ${prSubCommand}`;\n      }\n    case 'issue':\n      return 'Showing 3 of 3 open issues in username/repo\\n\\n#39  Improve performance  user1  2d\\n#38  Add test coverage  user2  3d\\n#37  Update dependencies  user3  1w';\n    default:\n      return `Unknown gh command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'git' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGit(args, workingDir) {\n  if (args.length < 2) {\n    return 'git: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'status':\n      return 'On branch main\\nYour branch is up to date with \\'origin/main\\'.\\n\\nChanges not staged for commit:\\n  (use \"git add <file>...\" to update what will be committed)\\n  (use \"git restore <file>...\" to discard changes in working directory)\\n        modified:   src/components/Terminal.js\\n        modified:   src/components/FileViewer.js\\n\\nno changes added to commit (use \"git add\" and/or \"git commit -a\")';\n    case 'add':\n      return '';\n    case 'commit':\n      return '[main a1b2c3d] Update terminal and file viewer components\\n 2 files changed, 150 insertions(+), 20 deletions(-)';\n    case 'push':\n      return 'Enumerating objects: 7, done.\\nCounting objects: 100% (7/7), done.\\nDelta compression using up to 8 threads\\nCompressing objects: 100% (4/4), done.\\nWriting objects: 100% (4/4), 1.23 KiB | 1.23 MiB/s, done.\\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\\nTo github.com:username/repo.git\\n   a1b2c3d..e4f5g6h  main -> main';\n    case 'log':\n      return 'commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t\\nAuthor: User <user@example.com>\\nDate:   Mon Mar 1 12:34:56 2024 -0800\\n\\n    Update terminal and file viewer components\\n\\ncommit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\\nAuthor: User <user@example.com>\\nDate:   Sun Feb 29 12:34:56 2024 -0800\\n\\n    Initial commit';\n    case 'branch':\n      return '* main\\n  feature/file-viewer\\n  feature/terminal';\n    case 'checkout':\n      const branchName = args.length > 2 ? args[2] : 'main';\n      return `Switched to branch '${branchName}'`;\n    default:\n      return `Unknown git command: ${subCommand}`;\n  }\n}\n\n/**\n * Get help text for available commands\n * @returns {string} - Help text\n */\n/**\n * Parse command arguments, handling quoted strings correctly\n * @param {string} commandLine - Command line to parse\n * @returns {string[]} - Array of parsed arguments\n */\nfunction parseCommandArgs(commandLine) {\n  const args = [];\n  let currentArg = '';\n  let inQuote = false;\n  let quoteChar = '';\n  for (let i = 0; i < commandLine.length; i++) {\n    const char = commandLine[i];\n    if ((char === '\"' || char === \"'\") && (!inQuote || quoteChar === char)) {\n      if (inQuote) {\n        inQuote = false;\n        quoteChar = '';\n      } else {\n        inQuote = true;\n        quoteChar = char;\n      }\n      continue;\n    }\n    if (char === ' ' && !inQuote) {\n      if (currentArg) {\n        args.push(currentArg);\n        currentArg = '';\n      }\n      continue;\n    }\n    currentArg += char;\n  }\n  if (currentArg) {\n    args.push(currentArg);\n  }\n  return args;\n}\n\n/**\n * Simulate the 'echo' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulateECHO(args) {\n  // Skip the 'echo' command itself\n  return args.slice(1).join(' ');\n}\n\n/**\n * Simulate the 'touch' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateTOUCH(args, workingDir) {\n  if (args.length < 2) {\n    return 'touch: missing file operand';\n  }\n\n  // In a real implementation, this would create the file\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'rm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateRM(args, workingDir) {\n  if (args.length < 2) {\n    return 'rm: missing operand';\n  }\n  const isRecursive = args.includes('-r') || args.includes('-rf') || args.includes('-fr');\n  const isForce = args.includes('-f') || args.includes('-rf') || args.includes('-fr');\n\n  // Get targets (ignore option flags)\n  const targets = args.slice(1).filter(arg => !arg.startsWith('-'));\n  if (targets.length === 0) {\n    return 'rm: missing operand';\n  }\n\n  // In a real implementation, this would remove the files/directories\n  // For our demo, we'll just pretend it worked\n\n  return '';\n}\n\n/**\n * Simulate the 'cp' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCP(args, workingDir) {\n  if (args.length < 3) {\n    return 'cp: missing file operand';\n  }\n  const isRecursive = args.includes('-r') || args.includes('-R');\n\n  // Get source and destination (last arg is destination)\n  const source = args[args.length - 2];\n  const destination = args[args.length - 1];\n\n  // In a real implementation, this would copy the files/directories\n  // For our demo, we'll just pretend it worked\n\n  return '';\n}\n\n/**\n * Simulate the 'mv' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMV(args, workingDir) {\n  if (args.length < 3) {\n    return 'mv: missing file operand';\n  }\n\n  // Get source and destination (last arg is destination)\n  const source = args[args.length - 2];\n  const destination = args[args.length - 1];\n\n  // In a real implementation, this would move the files/directories\n  // For our demo, we'll just pretend it worked\n\n  return '';\n}\n\n/**\n * Simulate the 'find' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateFIND(args, workingDir) {\n  // Basic implementation of find\n  // find [path] -name \"pattern\"\n\n  let path = '.';\n  let pattern = null;\n\n  // Parse arguments\n  for (let i = 1; i < args.length; i++) {\n    if (args[i] === '-name' && i + 1 < args.length) {\n      pattern = args[i + 1];\n      i++; // Skip the next argument\n    } else if (!args[i].startsWith('-') && i === 1) {\n      path = args[i];\n    }\n  }\n  if (!pattern) {\n    return 'find: missing arguments';\n  }\n\n  // Remove quotes if present\n  pattern = pattern.replace(/^['\"]|['\"]$/g, '');\n\n  // Convert glob pattern to regex\n  const regexPattern = pattern.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*').replace(/\\?/g, '.');\n  const regex = new RegExp(`^${regexPattern}$`);\n\n  // Get file listing for the path\n  const searchPath = path === '.' ? workingDir : resolveFilePath(path, workingDir);\n\n  // In a real implementation, this would search for files\n  // For our demo, we'll return a simulated result\n\n  // Create a reasonable list of matches based on the pattern\n  const matches = [];\n  const files = getMockFileListing(searchPath);\n  for (const file of files) {\n    if (regex.test(file.name)) {\n      matches.push(`${searchPath ? searchPath + '/' : ''}${file.name}`);\n    }\n  }\n  return matches.length > 0 ? matches.join('\\n') : '';\n}\n\n/**\n * Simulate the 'grep' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGREP(args, workingDir) {\n  if (args.length < 3) {\n    return 'grep: missing pattern';\n  }\n  const pattern = args[1];\n  const filePaths = args.slice(2);\n\n  // In a real implementation, this would search file contents\n  // For our demo, we'll return simulated results\n\n  const results = [];\n  for (const filePath of filePaths) {\n    const path = resolveFilePath(filePath, workingDir);\n    if (fileExists(path)) {\n      const content = getMockFileContent(path);\n      const lines = content.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i].includes(pattern)) {\n          results.push(`${filePath}:${i + 1}: ${lines[i]}`);\n        }\n      }\n    } else {\n      results.push(`grep: ${filePath}: No such file or directory`);\n    }\n  }\n  return results.join('\\n');\n}\n\n/**\n * Simulate the 'ps' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulatePS(args) {\n  const header = '  PID TTY          TIME CMD';\n  const processes = [' 1234 pts/0    00:00:01 bash', ' 5678 pts/0    00:00:00 npm', ' 9012 pts/0    00:00:12 node', '13456 pts/0    00:00:00 ps'];\n  return [header, ...processes].join('\\n');\n}\n\n/**\n * Simulate the 'node' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNODE(args, workingDir) {\n  if (args.length === 1) {\n    return 'Welcome to Node.js v18.16.0.\\nType \".help\" for more information.';\n  }\n  const scriptPath = args[1];\n  const path = resolveFilePath(scriptPath, workingDir);\n  if (fileExists(path)) {\n    return `Simulated execution of Node.js script: ${scriptPath}`;\n  } else {\n    return `Error: Cannot find module '${scriptPath}'`;\n  }\n}\n\n/**\n * Simulate the 'man' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulateMAN(args) {\n  if (args.length < 2) {\n    return 'What manual page do you want?';\n  }\n  const command = args[1];\n  const manPages = {\n    'ls': 'LS(1)                    User Commands                   LS(1)\\n\\nNAME\\n       ls - list directory contents\\n\\nSYNOPSIS\\n       ls [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       List information about the FILEs (the current directory by default).',\n    'cd': 'CD(1)                    User Commands                   CD(1)\\n\\nNAME\\n       cd - change directory\\n\\nSYNOPSIS\\n       cd [directory]\\n\\nDESCRIPTION\\n       Change the current directory to the specified directory.',\n    'cat': 'CAT(1)                  User Commands                   CAT(1)\\n\\nNAME\\n       cat - concatenate files and print on the standard output\\n\\nSYNOPSIS\\n       cat [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       Concatenate FILE(s) to standard output.',\n    'mkdir': 'MKDIR(1)               User Commands                 MKDIR(1)\\n\\nNAME\\n       mkdir - make directories\\n\\nSYNOPSIS\\n       mkdir [OPTION]... DIRECTORY...\\n\\nDESCRIPTION\\n       Create the DIRECTORY(ies), if they do not already exist.',\n    'touch': 'TOUCH(1)               User Commands                 TOUCH(1)\\n\\nNAME\\n       touch - change file timestamps\\n\\nSYNOPSIS\\n       touch [OPTION]... FILE...\\n\\nDESCRIPTION\\n       Update the access and modification times of each FILE to the current time.',\n    'rm': 'RM(1)                    User Commands                   RM(1)\\n\\nNAME\\n       rm - remove files or directories\\n\\nSYNOPSIS\\n       rm [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       Remove (unlink) the FILE(s).',\n    'cp': 'CP(1)                    User Commands                   CP(1)\\n\\nNAME\\n       cp - copy files and directories\\n\\nSYNOPSIS\\n       cp [OPTION]... SOURCE DEST\\n\\nDESCRIPTION\\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.',\n    'mv': 'MV(1)                    User Commands                   MV(1)\\n\\nNAME\\n       mv - move (rename) files\\n\\nSYNOPSIS\\n       mv [OPTION]... SOURCE DEST\\n\\nDESCRIPTION\\n       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.',\n    'find': 'FIND(1)                  User Commands                 FIND(1)\\n\\nNAME\\n       find - search for files in a directory hierarchy\\n\\nSYNOPSIS\\n       find [path...] [expression]\\n\\nDESCRIPTION\\n       Search for files in a directory hierarchy.',\n    'grep': 'GREP(1)                  User Commands                 GREP(1)\\n\\nNAME\\n       grep - print lines that match patterns\\n\\nSYNOPSIS\\n       grep [OPTION...] PATTERNS [FILE...]\\n\\nDESCRIPTION\\n       Search for PATTERNS in each FILE.',\n    'echo': 'ECHO(1)                  User Commands                 ECHO(1)\\n\\nNAME\\n       echo - display a line of text\\n\\nSYNOPSIS\\n       echo [SHORT-OPTION]... [STRING]...\\n\\nDESCRIPTION\\n       Echo the STRING(s) to standard output.',\n    'pwd': 'PWD(1)                   User Commands                  PWD(1)\\n\\nNAME\\n       pwd - print name of current/working directory\\n\\nSYNOPSIS\\n       pwd [OPTION]...\\n\\nDESCRIPTION\\n       Print the full filename of the current working directory.'\n  };\n  return manPages[command] || `No manual entry for ${command}`;\n}\nfunction getHelpText() {\n  return `\nAvailable commands:\n\nFile Operations:\n  ls [options]           List directory contents\n  cd <directory>         Change directory\n  pwd                    Print working directory\n  touch <file>           Create an empty file\n  mkdir <directory>      Create directory\n  rm [-rf] <file/dir>    Remove files or directories\n  cp [-r] <src> <dst>    Copy files or directories\n  mv <src> <dst>         Move/rename files or directories\n  cat <file>             Display file contents\n  find <path> -name <p>  Search for files\n  grep <pattern> <file>  Search for a pattern in files\n\nGit Commands:\n  git status             Show git status\n  git add <file>         Stage changes\n  git commit -m <msg>    Commit changes\n  git push               Push changes\n  git log                Show commit history\n  git branch             List branches\n  git checkout <branch>  Switch branches\n  \nnpm Commands:\n  npm start              Start development server\n  npm test               Run tests\n  npm build              Build for production\n  npm install [pkg]      Install dependencies\n  \nGitHub CLI:\n  gh pr list             List pull requests\n  gh pr create           Create pull request\n  gh issue               List issues\n  \nSystem Commands:\n  echo <text>            Display a line of text\n  date                   Show the current date and time\n  ps                     Report process status\n  whoami                 Print current user\n  man <command>          Display manual page\n  clear                  Clear the terminal screen\n  help                   Show this help\n`.trim();\n}\n\n/**\n * Check if a directory exists in our mock filesystem\n * @param {string} path - Directory path\n * @returns {boolean} - True if directory exists\n */\nfunction directoryExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common directories in our mock structure\n\n  if (!path) return true; // Root directory\n\n  const validDirs = ['src', 'src/components', 'src/services', 'public', 'node_modules'];\n  return validDirs.includes(path);\n}\n\n/**\n * Check if a file exists in our mock filesystem\n * @param {string} path - File path\n * @returns {boolean} - True if file exists\n */\nfunction fileExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common files in our mock structure\n\n  const validFiles = ['package.json', 'README.md', 'src/index.js', 'src/App.js', 'src/index.css', 'src/components/ChatWindow.js', 'src/components/FileViewer.js', 'src/components/Terminal.js', 'src/services/fileService.js', 'src/services/terminalService.js', 'public/index.html'];\n  return validFiles.includes(path);\n}\n\n/**\n * Resolve a file path based on the current working directory\n * @param {string} filename - File name or path\n * @param {string} workingDir - Current working directory\n * @returns {string} - Resolved file path\n */\nfunction resolveFilePath(filename, workingDir) {\n  if (filename.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    return filename.substring(1); // Remove leading slash\n  } else {\n    // Relative path\n    return workingDir ? `${workingDir}/${filename}` : filename;\n  }\n}\n\n/**\n * Get mock file listing based on directory\n * @param {string} directory - Directory path\n * @returns {Array} - Array of file and directory objects\n */\nfunction getMockFileListing(directory) {\n  // Root directory\n  if (!directory) {\n    return [{\n      name: 'public',\n      type: 'folder'\n    }, {\n      name: 'src',\n      type: 'folder'\n    }, {\n      name: 'package.json',\n      type: 'file'\n    }, {\n      name: 'README.md',\n      type: 'file'\n    }, {\n      name: 'node_modules',\n      type: 'folder'\n    }];\n  }\n\n  // src directory\n  if (directory === 'src') {\n    return [{\n      name: 'components',\n      type: 'folder'\n    }, {\n      name: 'services',\n      type: 'folder'\n    }, {\n      name: 'App.js',\n      type: 'file'\n    }, {\n      name: 'index.js',\n      type: 'file'\n    }, {\n      name: 'index.css',\n      type: 'file'\n    }];\n  }\n\n  // src/components directory\n  if (directory === 'src/components') {\n    return [{\n      name: 'ChatWindow.js',\n      type: 'file'\n    }, {\n      name: 'FileViewer.js',\n      type: 'file'\n    }, {\n      name: 'Terminal.js',\n      type: 'file'\n    }];\n  }\n\n  // src/services directory\n  if (directory === 'src/services') {\n    return [{\n      name: 'fileService.js',\n      type: 'file'\n    }, {\n      name: 'terminalService.js',\n      type: 'file'\n    }];\n  }\n\n  // public directory\n  if (directory === 'public') {\n    return [{\n      name: 'index.html',\n      type: 'file'\n    }];\n  }\n\n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`\n  };\n\n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}","map":{"version":3,"names":["BASE_DIRECTORY","virtualFileSystem","directories","files","executeCommand","command","currentDirectory","Promise","resolve","setTimeout","trim","workingDir","fullPath","args","parseCommandArgs","cmd","length","toLowerCase","newDirectory","output","simulateLS","cdResult","simulateCD","simulatePWD","simulateCAT","simulateTOUCH","simulateMKDIR","simulateRM","simulateCP","simulateMV","simulateFIND","simulateGREP","simulateECHO","simulateNPM","simulateNODE","simulateGH","simulateGit","simulatePS","Date","toString","getHelpText","simulateMAN","fileExists","error","message","isLongFormat","includes","getMockFileListing","map","file","isDir","type","permissions","size","Math","floor","random","date","toLocaleDateString","month","day","hour","minute","padStart","name","join","target","newDir","substring","lastIndexOf","startsWith","directoryExists","filename","path","resolveFilePath","getMockFileContent","subCommand","packageName","prSubCommand","branchName","commandLine","currentArg","inQuote","quoteChar","i","char","push","slice","isRecursive","isForce","targets","filter","arg","source","destination","pattern","replace","regexPattern","regex","RegExp","searchPath","matches","test","filePaths","results","filePath","content","lines","split","header","processes","scriptPath","manPages","validDirs","validFiles","directory","fileContents"],"sources":["/Users/georgeseib/Documents/projects/cc/third/src/services/terminalService.js"],"sourcesContent":["/**\n * Terminal Service\n * \n * This module provides functions to interact with a simulated shell.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll simulate shell commands and responses.\n */\n\n// Base directory for the file system - should match what's used in fileService\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n// In-memory filesystem to track created/modified files and directories\nconst virtualFileSystem = {\n  // Initial directories\n  directories: [\n    '',  // Root\n    'src',\n    'src/components',\n    'src/services',\n    'public',\n    'node_modules'\n  ],\n  \n  // Initial files with their content\n  files: {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'src/App.js': `import React from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components/ChatWindow';\nimport FileViewer from './components/FileViewer';\nimport Terminal from './components/Terminal';\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ChatContainer>\n        <ChatWindow />\n      </ChatContainer>\n      <FileViewerContainer>\n        <FileViewer />\n      </FileViewerContainer>\n      <TerminalContainer>\n        <Terminal />\n      </TerminalContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;`,\n    'src/index.css': `body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}`,\n    'src/components/ChatWindow.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// Chat window component implementation\nexport default function ChatWindow() {\n  return <div>Chat Window</div>;\n}`,\n    'src/components/FileViewer.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// File viewer component implementation\nexport default function FileViewer() {\n  return <div>File Viewer</div>;\n}`,\n    'src/components/Terminal.js': `import React from 'react';\nimport styled from 'styled-components';\n\n// Terminal component implementation\nexport default function Terminal() {\n  return <div>Terminal</div>;\n}`,\n    'src/services/fileService.js': `// File service implementation`,\n    'src/services/terminalService.js': `// Terminal service implementation`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`,\n  }\n};\n\n/**\n * Execute a shell command\n * @param {string} command - Command to execute\n * @param {string} currentDirectory - Current working directory\n * @returns {Promise<{output: string, newDirectory: string}>} - Command output and new working directory\n */\nexport const executeCommand = async (command, currentDirectory = '') => {\n  // In a real implementation, this would call a backend API\n  // For demo purposes, we'll simulate responses to common commands\n\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 100));\n\n  // Trim command\n  command = command.trim();\n\n  // Determine the full path of the current directory\n  const workingDir = currentDirectory || '';\n  const fullPath = workingDir ? `${BASE_DIRECTORY}/${workingDir}` : BASE_DIRECTORY;\n\n  // Parse command and arguments - handle quoted arguments properly\n  const args = parseCommandArgs(command);\n  const cmd = args.length > 0 ? args[0].toLowerCase() : '';\n\n  // Track the new directory (changes if cd is used)\n  let newDirectory = currentDirectory;\n\n  // Simulate command execution\n  let output = '';\n\n  try {\n    // Handle different commands\n    switch (cmd) {\n      // File system navigation\n      case 'ls':\n        output = simulateLS(args, workingDir);\n        break;\n      \n      case 'cd':\n        const cdResult = simulateCD(args, workingDir);\n        output = cdResult.output;\n        newDirectory = cdResult.newDirectory;\n        break;\n      \n      case 'pwd':\n        output = simulatePWD(workingDir);\n        break;\n      \n      // File operations\n      case 'cat':\n        output = simulateCAT(args, workingDir);\n        break;\n      \n      case 'touch':\n        output = simulateTOUCH(args, workingDir);\n        break;\n      \n      case 'mkdir':\n        output = simulateMKDIR(args, workingDir);\n        break;\n      \n      case 'rm':\n        output = simulateRM(args, workingDir);\n        break;\n      \n      case 'cp':\n        output = simulateCP(args, workingDir);\n        break;\n      \n      case 'mv':\n        output = simulateMV(args, workingDir);\n        break;\n      \n      case 'find':\n        output = simulateFIND(args, workingDir);\n        break;\n      \n      case 'grep':\n        output = simulateGREP(args, workingDir);\n        break;\n      \n      // Text output\n      case 'echo':\n        output = simulateECHO(args);\n        break;\n      \n      // External tools\n      case 'npm':\n        output = simulateNPM(args, workingDir);\n        break;\n      \n      case 'node':\n        output = simulateNODE(args, workingDir);\n        break;\n      \n      case 'gh':\n        output = simulateGH(args, workingDir);\n        break;\n      \n      case 'git':\n        output = simulateGit(args, workingDir);\n        break;\n      \n      // System commands\n      case 'ps':\n        output = simulatePS(args);\n        break;\n      \n      case 'whoami':\n        output = 'user';\n        break;\n      \n      case 'date':\n        output = new Date().toString();\n        break;\n      \n      case 'help':\n        output = getHelpText();\n        break;\n      \n      case 'man':\n        output = simulateMAN(args);\n        break;\n      \n      case 'clear':\n        // The clear command returns a special signal to clear the terminal\n        return { output: 'CLEAR_TERMINAL', newDirectory };\n      \n      case '':\n        // Empty command, do nothing\n        output = '';\n        break;\n      \n      default:\n        // Check if this is an executable file in the current directory\n        if (fileExists(`${workingDir ? workingDir + '/' : ''}${cmd}`)) {\n          output = `Simulated execution of ${cmd}`;\n        } else {\n          output = `Command not found: ${cmd}\\nType 'help' to see available commands.`;\n        }\n    }\n  } catch (error) {\n    output = `Error: ${error.message}`;\n  }\n\n  return { output, newDirectory };\n};\n\n/**\n * Simulate the 'ls' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateLS(args, workingDir) {\n  // Check for -l flag\n  const isLongFormat = args.includes('-l');\n  \n  // Get mock file listing based on the current directory\n  const files = getMockFileListing(workingDir);\n  \n  if (isLongFormat) {\n    // Format like a real ls -l command\n    return files.map(file => {\n      const isDir = file.type === 'folder';\n      const permissions = isDir ? 'drwxr-xr-x' : '-rw-r--r--';\n      const size = isDir ? 4096 : Math.floor(Math.random() * 10000);\n      const date = new Date().toLocaleDateString('en-US', { \n        month: 'short', \n        day: 'numeric', \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n      return `${permissions} 1 user group ${size.toString().padStart(6)} ${date} ${file.name}${isDir ? '/' : ''}`;\n    }).join('\\n');\n  } else {\n    // Simple format\n    return files.map(file => {\n      return file.type === 'folder' ? `${file.name}/` : file.name;\n    }).join('  ');\n  }\n}\n\n/**\n * Simulate the 'cd' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {{output: string, newDirectory: string}} - Command output and new working directory\n */\nfunction simulateCD(args, workingDir) {\n  if (args.length < 2) {\n    // cd without arguments goes to home directory\n    return { output: '', newDirectory: '' };\n  }\n  \n  const target = args[1];\n  \n  if (target === '..') {\n    // Go up one directory\n    if (!workingDir || !workingDir.includes('/')) {\n      return { output: '', newDirectory: '' };\n    }\n    \n    const newDir = workingDir.substring(0, workingDir.lastIndexOf('/'));\n    return { output: '', newDirectory: newDir };\n  }\n  \n  if (target === '.') {\n    // Stay in current directory\n    return { output: '', newDirectory: workingDir };\n  }\n  \n  if (target.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    const newDir = target.substring(1); // Remove leading slash\n    \n    // Check if directory exists\n    if (directoryExists(newDir)) {\n      return { output: '', newDirectory: newDir };\n    } else {\n      return { \n        output: `cd: ${target}: No such file or directory`, \n        newDirectory: workingDir \n      };\n    }\n  }\n  \n  // Relative path\n  const newDir = workingDir ? `${workingDir}/${target}` : target;\n  \n  // Check if directory exists\n  if (directoryExists(newDir)) {\n    return { output: '', newDirectory: newDir };\n  } else {\n    return { \n      output: `cd: ${target}: No such file or directory`, \n      newDirectory: workingDir \n    };\n  }\n}\n\n/**\n * Simulate the 'pwd' command\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulatePWD(workingDir) {\n  return workingDir ? `/${workingDir}` : '/';\n}\n\n/**\n * Simulate the 'cat' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCAT(args, workingDir) {\n  if (args.length < 2) {\n    return 'cat: missing file operand';\n  }\n  \n  const filename = args[1];\n  const path = resolveFilePath(filename, workingDir);\n  \n  // Check if file exists\n  if (fileExists(path)) {\n    return getMockFileContent(path);\n  } else {\n    return `cat: ${filename}: No such file or directory`;\n  }\n}\n\n/**\n * Simulate the 'mkdir' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMKDIR(args, workingDir) {\n  if (args.length < 2) {\n    return 'mkdir: missing operand';\n  }\n  \n  // In a real implementation, this would create the directory\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'npm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNPM(args, workingDir) {\n  if (args.length < 2) {\n    return 'npm: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'start':\n      return 'Starting development server...\\n\\nCompiled successfully!\\n\\nYou can now view the app in the browser.\\n\\n  Local:            http://localhost:3000\\n  On Your Network:  http://192.168.0.45:3000';\n    \n    case 'test':\n      return 'PASS  src/__tests__/app.test.js\\nPASS  src/__tests__/components.test.js\\n\\nTest Suites: 2 passed, 2 total\\nTests:       7 passed, 7 total\\nSnapshots:   0 total\\nTime:        1.234s';\n    \n    case 'build':\n      return 'Creating an optimized production build...\\nCompiled successfully.\\n\\nFile sizes after gzip:\\n\\n  142.32 KB  build/static/js/main.a1b2c3d4.js\\n  23.45 KB   build/static/css/main.a1b2c3d4.css';\n    \n    case 'install':\n      const packageName = args.length > 2 ? args[2] : '';\n      if (packageName) {\n        return `+ ${packageName}@1.2.3\\nadded 42 packages from 23 contributors in 2.5s`;\n      } else {\n        return 'added 1344 packages in 30s';\n      }\n    \n    default:\n      return `Unknown npm command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'gh' (GitHub CLI) command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGH(args, workingDir) {\n  if (args.length < 2) {\n    return 'gh: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'pr':\n      if (args.length < 3) {\n        return 'gh pr: missing subcommand';\n      }\n      \n      const prSubCommand = args[2];\n      \n      switch (prSubCommand) {\n        case 'list':\n          return 'Showing 2 of 2 open pull requests in username/repo\\n\\n#42  Update documentation  user1  [feature/docs]  1d\\n#41  Fix terminal component  user2  [bugfix/terminal]  2d';\n        \n        case 'create':\n          return 'Creating pull request for feature-branch into main in username/repo\\n\\nPull request created: https://github.com/username/repo/pull/43';\n        \n        default:\n          return `Unknown gh pr command: ${prSubCommand}`;\n      }\n    \n    case 'issue':\n      return 'Showing 3 of 3 open issues in username/repo\\n\\n#39  Improve performance  user1  2d\\n#38  Add test coverage  user2  3d\\n#37  Update dependencies  user3  1w';\n    \n    default:\n      return `Unknown gh command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'git' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGit(args, workingDir) {\n  if (args.length < 2) {\n    return 'git: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'status':\n      return 'On branch main\\nYour branch is up to date with \\'origin/main\\'.\\n\\nChanges not staged for commit:\\n  (use \"git add <file>...\" to update what will be committed)\\n  (use \"git restore <file>...\" to discard changes in working directory)\\n        modified:   src/components/Terminal.js\\n        modified:   src/components/FileViewer.js\\n\\nno changes added to commit (use \"git add\" and/or \"git commit -a\")';\n    \n    case 'add':\n      return '';\n    \n    case 'commit':\n      return '[main a1b2c3d] Update terminal and file viewer components\\n 2 files changed, 150 insertions(+), 20 deletions(-)';\n    \n    case 'push':\n      return 'Enumerating objects: 7, done.\\nCounting objects: 100% (7/7), done.\\nDelta compression using up to 8 threads\\nCompressing objects: 100% (4/4), done.\\nWriting objects: 100% (4/4), 1.23 KiB | 1.23 MiB/s, done.\\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\\nTo github.com:username/repo.git\\n   a1b2c3d..e4f5g6h  main -> main';\n    \n    case 'log':\n      return 'commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t\\nAuthor: User <user@example.com>\\nDate:   Mon Mar 1 12:34:56 2024 -0800\\n\\n    Update terminal and file viewer components\\n\\ncommit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\\nAuthor: User <user@example.com>\\nDate:   Sun Feb 29 12:34:56 2024 -0800\\n\\n    Initial commit';\n    \n    case 'branch':\n      return '* main\\n  feature/file-viewer\\n  feature/terminal';\n    \n    case 'checkout':\n      const branchName = args.length > 2 ? args[2] : 'main';\n      return `Switched to branch '${branchName}'`;\n    \n    default:\n      return `Unknown git command: ${subCommand}`;\n  }\n}\n\n/**\n * Get help text for available commands\n * @returns {string} - Help text\n */\n/**\n * Parse command arguments, handling quoted strings correctly\n * @param {string} commandLine - Command line to parse\n * @returns {string[]} - Array of parsed arguments\n */\nfunction parseCommandArgs(commandLine) {\n  const args = [];\n  let currentArg = '';\n  let inQuote = false;\n  let quoteChar = '';\n  \n  for (let i = 0; i < commandLine.length; i++) {\n    const char = commandLine[i];\n    \n    if ((char === '\"' || char === \"'\") && (!inQuote || quoteChar === char)) {\n      if (inQuote) {\n        inQuote = false;\n        quoteChar = '';\n      } else {\n        inQuote = true;\n        quoteChar = char;\n      }\n      continue;\n    }\n    \n    if (char === ' ' && !inQuote) {\n      if (currentArg) {\n        args.push(currentArg);\n        currentArg = '';\n      }\n      continue;\n    }\n    \n    currentArg += char;\n  }\n  \n  if (currentArg) {\n    args.push(currentArg);\n  }\n  \n  return args;\n}\n\n/**\n * Simulate the 'echo' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulateECHO(args) {\n  // Skip the 'echo' command itself\n  return args.slice(1).join(' ');\n}\n\n/**\n * Simulate the 'touch' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateTOUCH(args, workingDir) {\n  if (args.length < 2) {\n    return 'touch: missing file operand';\n  }\n  \n  // In a real implementation, this would create the file\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'rm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateRM(args, workingDir) {\n  if (args.length < 2) {\n    return 'rm: missing operand';\n  }\n  \n  const isRecursive = args.includes('-r') || args.includes('-rf') || args.includes('-fr');\n  const isForce = args.includes('-f') || args.includes('-rf') || args.includes('-fr');\n  \n  // Get targets (ignore option flags)\n  const targets = args.slice(1).filter(arg => !arg.startsWith('-'));\n  \n  if (targets.length === 0) {\n    return 'rm: missing operand';\n  }\n  \n  // In a real implementation, this would remove the files/directories\n  // For our demo, we'll just pretend it worked\n  \n  return '';\n}\n\n/**\n * Simulate the 'cp' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCP(args, workingDir) {\n  if (args.length < 3) {\n    return 'cp: missing file operand';\n  }\n  \n  const isRecursive = args.includes('-r') || args.includes('-R');\n  \n  // Get source and destination (last arg is destination)\n  const source = args[args.length - 2];\n  const destination = args[args.length - 1];\n  \n  // In a real implementation, this would copy the files/directories\n  // For our demo, we'll just pretend it worked\n  \n  return '';\n}\n\n/**\n * Simulate the 'mv' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMV(args, workingDir) {\n  if (args.length < 3) {\n    return 'mv: missing file operand';\n  }\n  \n  // Get source and destination (last arg is destination)\n  const source = args[args.length - 2];\n  const destination = args[args.length - 1];\n  \n  // In a real implementation, this would move the files/directories\n  // For our demo, we'll just pretend it worked\n  \n  return '';\n}\n\n/**\n * Simulate the 'find' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateFIND(args, workingDir) {\n  // Basic implementation of find\n  // find [path] -name \"pattern\"\n  \n  let path = '.';\n  let pattern = null;\n  \n  // Parse arguments\n  for (let i = 1; i < args.length; i++) {\n    if (args[i] === '-name' && i + 1 < args.length) {\n      pattern = args[i + 1];\n      i++; // Skip the next argument\n    } else if (!args[i].startsWith('-') && i === 1) {\n      path = args[i];\n    }\n  }\n  \n  if (!pattern) {\n    return 'find: missing arguments';\n  }\n  \n  // Remove quotes if present\n  pattern = pattern.replace(/^['\"]|['\"]$/g, '');\n  \n  // Convert glob pattern to regex\n  const regexPattern = pattern\n    .replace(/\\./g, '\\\\.')\n    .replace(/\\*/g, '.*')\n    .replace(/\\?/g, '.');\n  \n  const regex = new RegExp(`^${regexPattern}$`);\n  \n  // Get file listing for the path\n  const searchPath = path === '.' ? workingDir : resolveFilePath(path, workingDir);\n  \n  // In a real implementation, this would search for files\n  // For our demo, we'll return a simulated result\n  \n  // Create a reasonable list of matches based on the pattern\n  const matches = [];\n  const files = getMockFileListing(searchPath);\n  \n  for (const file of files) {\n    if (regex.test(file.name)) {\n      matches.push(`${searchPath ? searchPath + '/' : ''}${file.name}`);\n    }\n  }\n  \n  return matches.length > 0 ? matches.join('\\n') : '';\n}\n\n/**\n * Simulate the 'grep' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGREP(args, workingDir) {\n  if (args.length < 3) {\n    return 'grep: missing pattern';\n  }\n  \n  const pattern = args[1];\n  const filePaths = args.slice(2);\n  \n  // In a real implementation, this would search file contents\n  // For our demo, we'll return simulated results\n  \n  const results = [];\n  \n  for (const filePath of filePaths) {\n    const path = resolveFilePath(filePath, workingDir);\n    \n    if (fileExists(path)) {\n      const content = getMockFileContent(path);\n      const lines = content.split('\\n');\n      \n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i].includes(pattern)) {\n          results.push(`${filePath}:${i + 1}: ${lines[i]}`);\n        }\n      }\n    } else {\n      results.push(`grep: ${filePath}: No such file or directory`);\n    }\n  }\n  \n  return results.join('\\n');\n}\n\n/**\n * Simulate the 'ps' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulatePS(args) {\n  const header = '  PID TTY          TIME CMD';\n  const processes = [\n    ' 1234 pts/0    00:00:01 bash',\n    ' 5678 pts/0    00:00:00 npm',\n    ' 9012 pts/0    00:00:12 node',\n    '13456 pts/0    00:00:00 ps'\n  ];\n  \n  return [header, ...processes].join('\\n');\n}\n\n/**\n * Simulate the 'node' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNODE(args, workingDir) {\n  if (args.length === 1) {\n    return 'Welcome to Node.js v18.16.0.\\nType \".help\" for more information.';\n  }\n  \n  const scriptPath = args[1];\n  const path = resolveFilePath(scriptPath, workingDir);\n  \n  if (fileExists(path)) {\n    return `Simulated execution of Node.js script: ${scriptPath}`;\n  } else {\n    return `Error: Cannot find module '${scriptPath}'`;\n  }\n}\n\n/**\n * Simulate the 'man' command\n * @param {string[]} args - Command arguments\n * @returns {string} - Command output\n */\nfunction simulateMAN(args) {\n  if (args.length < 2) {\n    return 'What manual page do you want?';\n  }\n  \n  const command = args[1];\n  \n  const manPages = {\n    'ls': 'LS(1)                    User Commands                   LS(1)\\n\\nNAME\\n       ls - list directory contents\\n\\nSYNOPSIS\\n       ls [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       List information about the FILEs (the current directory by default).',\n    'cd': 'CD(1)                    User Commands                   CD(1)\\n\\nNAME\\n       cd - change directory\\n\\nSYNOPSIS\\n       cd [directory]\\n\\nDESCRIPTION\\n       Change the current directory to the specified directory.',\n    'cat': 'CAT(1)                  User Commands                   CAT(1)\\n\\nNAME\\n       cat - concatenate files and print on the standard output\\n\\nSYNOPSIS\\n       cat [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       Concatenate FILE(s) to standard output.',\n    'mkdir': 'MKDIR(1)               User Commands                 MKDIR(1)\\n\\nNAME\\n       mkdir - make directories\\n\\nSYNOPSIS\\n       mkdir [OPTION]... DIRECTORY...\\n\\nDESCRIPTION\\n       Create the DIRECTORY(ies), if they do not already exist.',\n    'touch': 'TOUCH(1)               User Commands                 TOUCH(1)\\n\\nNAME\\n       touch - change file timestamps\\n\\nSYNOPSIS\\n       touch [OPTION]... FILE...\\n\\nDESCRIPTION\\n       Update the access and modification times of each FILE to the current time.',\n    'rm': 'RM(1)                    User Commands                   RM(1)\\n\\nNAME\\n       rm - remove files or directories\\n\\nSYNOPSIS\\n       rm [OPTION]... [FILE]...\\n\\nDESCRIPTION\\n       Remove (unlink) the FILE(s).',\n    'cp': 'CP(1)                    User Commands                   CP(1)\\n\\nNAME\\n       cp - copy files and directories\\n\\nSYNOPSIS\\n       cp [OPTION]... SOURCE DEST\\n\\nDESCRIPTION\\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.',\n    'mv': 'MV(1)                    User Commands                   MV(1)\\n\\nNAME\\n       mv - move (rename) files\\n\\nSYNOPSIS\\n       mv [OPTION]... SOURCE DEST\\n\\nDESCRIPTION\\n       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.',\n    'find': 'FIND(1)                  User Commands                 FIND(1)\\n\\nNAME\\n       find - search for files in a directory hierarchy\\n\\nSYNOPSIS\\n       find [path...] [expression]\\n\\nDESCRIPTION\\n       Search for files in a directory hierarchy.',\n    'grep': 'GREP(1)                  User Commands                 GREP(1)\\n\\nNAME\\n       grep - print lines that match patterns\\n\\nSYNOPSIS\\n       grep [OPTION...] PATTERNS [FILE...]\\n\\nDESCRIPTION\\n       Search for PATTERNS in each FILE.',\n    'echo': 'ECHO(1)                  User Commands                 ECHO(1)\\n\\nNAME\\n       echo - display a line of text\\n\\nSYNOPSIS\\n       echo [SHORT-OPTION]... [STRING]...\\n\\nDESCRIPTION\\n       Echo the STRING(s) to standard output.',\n    'pwd': 'PWD(1)                   User Commands                  PWD(1)\\n\\nNAME\\n       pwd - print name of current/working directory\\n\\nSYNOPSIS\\n       pwd [OPTION]...\\n\\nDESCRIPTION\\n       Print the full filename of the current working directory.',\n  };\n  \n  return manPages[command] || `No manual entry for ${command}`;\n}\n\nfunction getHelpText() {\n  return `\nAvailable commands:\n\nFile Operations:\n  ls [options]           List directory contents\n  cd <directory>         Change directory\n  pwd                    Print working directory\n  touch <file>           Create an empty file\n  mkdir <directory>      Create directory\n  rm [-rf] <file/dir>    Remove files or directories\n  cp [-r] <src> <dst>    Copy files or directories\n  mv <src> <dst>         Move/rename files or directories\n  cat <file>             Display file contents\n  find <path> -name <p>  Search for files\n  grep <pattern> <file>  Search for a pattern in files\n\nGit Commands:\n  git status             Show git status\n  git add <file>         Stage changes\n  git commit -m <msg>    Commit changes\n  git push               Push changes\n  git log                Show commit history\n  git branch             List branches\n  git checkout <branch>  Switch branches\n  \nnpm Commands:\n  npm start              Start development server\n  npm test               Run tests\n  npm build              Build for production\n  npm install [pkg]      Install dependencies\n  \nGitHub CLI:\n  gh pr list             List pull requests\n  gh pr create           Create pull request\n  gh issue               List issues\n  \nSystem Commands:\n  echo <text>            Display a line of text\n  date                   Show the current date and time\n  ps                     Report process status\n  whoami                 Print current user\n  man <command>          Display manual page\n  clear                  Clear the terminal screen\n  help                   Show this help\n`.trim();\n}\n\n/**\n * Check if a directory exists in our mock filesystem\n * @param {string} path - Directory path\n * @returns {boolean} - True if directory exists\n */\nfunction directoryExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common directories in our mock structure\n  \n  if (!path) return true; // Root directory\n  \n  const validDirs = [\n    'src',\n    'src/components',\n    'src/services',\n    'public',\n    'node_modules'\n  ];\n  \n  return validDirs.includes(path);\n}\n\n/**\n * Check if a file exists in our mock filesystem\n * @param {string} path - File path\n * @returns {boolean} - True if file exists\n */\nfunction fileExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common files in our mock structure\n  \n  const validFiles = [\n    'package.json',\n    'README.md',\n    'src/index.js',\n    'src/App.js',\n    'src/index.css',\n    'src/components/ChatWindow.js',\n    'src/components/FileViewer.js',\n    'src/components/Terminal.js',\n    'src/services/fileService.js',\n    'src/services/terminalService.js',\n    'public/index.html'\n  ];\n  \n  return validFiles.includes(path);\n}\n\n/**\n * Resolve a file path based on the current working directory\n * @param {string} filename - File name or path\n * @param {string} workingDir - Current working directory\n * @returns {string} - Resolved file path\n */\nfunction resolveFilePath(filename, workingDir) {\n  if (filename.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    return filename.substring(1); // Remove leading slash\n  } else {\n    // Relative path\n    return workingDir ? `${workingDir}/${filename}` : filename;\n  }\n}\n\n/**\n * Get mock file listing based on directory\n * @param {string} directory - Directory path\n * @returns {Array} - Array of file and directory objects\n */\nfunction getMockFileListing(directory) {\n  // Root directory\n  if (!directory) {\n    return [\n      { name: 'public', type: 'folder' },\n      { name: 'src', type: 'folder' },\n      { name: 'package.json', type: 'file' },\n      { name: 'README.md', type: 'file' },\n      { name: 'node_modules', type: 'folder' },\n    ];\n  }\n  \n  // src directory\n  if (directory === 'src') {\n    return [\n      { name: 'components', type: 'folder' },\n      { name: 'services', type: 'folder' },\n      { name: 'App.js', type: 'file' },\n      { name: 'index.js', type: 'file' },\n      { name: 'index.css', type: 'file' },\n    ];\n  }\n  \n  // src/components directory\n  if (directory === 'src/components') {\n    return [\n      { name: 'ChatWindow.js', type: 'file' },\n      { name: 'FileViewer.js', type: 'file' },\n      { name: 'Terminal.js', type: 'file' },\n    ];\n  }\n  \n  // src/services directory\n  if (directory === 'src/services') {\n    return [\n      { name: 'fileService.js', type: 'file' },\n      { name: 'terminalService.js', type: 'file' },\n    ];\n  }\n  \n  // public directory\n  if (directory === 'public') {\n    return [\n      { name: 'index.html', type: 'file' },\n    ];\n  }\n  \n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`,\n  };\n  \n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,cAAc,GAAG,+CAA+C;;AAEtE;AACA,MAAMC,iBAAiB,GAAG;EACxB;EACAC,WAAW,EAAE,CACX,EAAE;EAAG;EACL,KAAK,EACL,gBAAgB,EAChB,cAAc,EACd,QAAQ,EACR,cAAc,CACf;EAED;EACAC,KAAK,EAAE;IACL,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,WAAW,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wEAAwE;IACpE,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACC,YAAY,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;IAChB,eAAe,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,8BAA8B,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,8BAA8B,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,4BAA4B,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,6BAA6B,EAAE,gCAAgC;IAC/D,iCAAiC,EAAE,oCAAoC;IACvE,mBAAmB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,OAAO,EAAEC,gBAAgB,GAAG,EAAE,KAAK;EACtE;EACA;;EAEA;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACAH,OAAO,GAAGA,OAAO,CAACK,IAAI,CAAC,CAAC;;EAExB;EACA,MAAMC,UAAU,GAAGL,gBAAgB,IAAI,EAAE;EACzC,MAAMM,QAAQ,GAAGD,UAAU,GAAG,GAAGX,cAAc,IAAIW,UAAU,EAAE,GAAGX,cAAc;;EAEhF;EACA,MAAMa,IAAI,GAAGC,gBAAgB,CAACT,OAAO,CAAC;EACtC,MAAMU,GAAG,GAAGF,IAAI,CAACG,MAAM,GAAG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,GAAG,EAAE;;EAExD;EACA,IAAIC,YAAY,GAAGZ,gBAAgB;;EAEnC;EACA,IAAIa,MAAM,GAAG,EAAE;EAEf,IAAI;IACF;IACA,QAAQJ,GAAG;MACT;MACA,KAAK,IAAI;QACPI,MAAM,GAAGC,UAAU,CAACP,IAAI,EAAEF,UAAU,CAAC;QACrC;MAEF,KAAK,IAAI;QACP,MAAMU,QAAQ,GAAGC,UAAU,CAACT,IAAI,EAAEF,UAAU,CAAC;QAC7CQ,MAAM,GAAGE,QAAQ,CAACF,MAAM;QACxBD,YAAY,GAAGG,QAAQ,CAACH,YAAY;QACpC;MAEF,KAAK,KAAK;QACRC,MAAM,GAAGI,WAAW,CAACZ,UAAU,CAAC;QAChC;;MAEF;MACA,KAAK,KAAK;QACRQ,MAAM,GAAGK,WAAW,CAACX,IAAI,EAAEF,UAAU,CAAC;QACtC;MAEF,KAAK,OAAO;QACVQ,MAAM,GAAGM,aAAa,CAACZ,IAAI,EAAEF,UAAU,CAAC;QACxC;MAEF,KAAK,OAAO;QACVQ,MAAM,GAAGO,aAAa,CAACb,IAAI,EAAEF,UAAU,CAAC;QACxC;MAEF,KAAK,IAAI;QACPQ,MAAM,GAAGQ,UAAU,CAACd,IAAI,EAAEF,UAAU,CAAC;QACrC;MAEF,KAAK,IAAI;QACPQ,MAAM,GAAGS,UAAU,CAACf,IAAI,EAAEF,UAAU,CAAC;QACrC;MAEF,KAAK,IAAI;QACPQ,MAAM,GAAGU,UAAU,CAAChB,IAAI,EAAEF,UAAU,CAAC;QACrC;MAEF,KAAK,MAAM;QACTQ,MAAM,GAAGW,YAAY,CAACjB,IAAI,EAAEF,UAAU,CAAC;QACvC;MAEF,KAAK,MAAM;QACTQ,MAAM,GAAGY,YAAY,CAAClB,IAAI,EAAEF,UAAU,CAAC;QACvC;;MAEF;MACA,KAAK,MAAM;QACTQ,MAAM,GAAGa,YAAY,CAACnB,IAAI,CAAC;QAC3B;;MAEF;MACA,KAAK,KAAK;QACRM,MAAM,GAAGc,WAAW,CAACpB,IAAI,EAAEF,UAAU,CAAC;QACtC;MAEF,KAAK,MAAM;QACTQ,MAAM,GAAGe,YAAY,CAACrB,IAAI,EAAEF,UAAU,CAAC;QACvC;MAEF,KAAK,IAAI;QACPQ,MAAM,GAAGgB,UAAU,CAACtB,IAAI,EAAEF,UAAU,CAAC;QACrC;MAEF,KAAK,KAAK;QACRQ,MAAM,GAAGiB,WAAW,CAACvB,IAAI,EAAEF,UAAU,CAAC;QACtC;;MAEF;MACA,KAAK,IAAI;QACPQ,MAAM,GAAGkB,UAAU,CAACxB,IAAI,CAAC;QACzB;MAEF,KAAK,QAAQ;QACXM,MAAM,GAAG,MAAM;QACf;MAEF,KAAK,MAAM;QACTA,MAAM,GAAG,IAAImB,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QAC9B;MAEF,KAAK,MAAM;QACTpB,MAAM,GAAGqB,WAAW,CAAC,CAAC;QACtB;MAEF,KAAK,KAAK;QACRrB,MAAM,GAAGsB,WAAW,CAAC5B,IAAI,CAAC;QAC1B;MAEF,KAAK,OAAO;QACV;QACA,OAAO;UAAEM,MAAM,EAAE,gBAAgB;UAAED;QAAa,CAAC;MAEnD,KAAK,EAAE;QACL;QACAC,MAAM,GAAG,EAAE;QACX;MAEF;QACE;QACA,IAAIuB,UAAU,CAAC,GAAG/B,UAAU,GAAGA,UAAU,GAAG,GAAG,GAAG,EAAE,GAAGI,GAAG,EAAE,CAAC,EAAE;UAC7DI,MAAM,GAAG,0BAA0BJ,GAAG,EAAE;QAC1C,CAAC,MAAM;UACLI,MAAM,GAAG,sBAAsBJ,GAAG,0CAA0C;QAC9E;IACJ;EACF,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdxB,MAAM,GAAG,UAAUwB,KAAK,CAACC,OAAO,EAAE;EACpC;EAEA,OAAO;IAAEzB,MAAM;IAAED;EAAa,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,UAAUA,CAACP,IAAI,EAAEF,UAAU,EAAE;EACpC;EACA,MAAMkC,YAAY,GAAGhC,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAM3C,KAAK,GAAG4C,kBAAkB,CAACpC,UAAU,CAAC;EAE5C,IAAIkC,YAAY,EAAE;IAChB;IACA,OAAO1C,KAAK,CAAC6C,GAAG,CAACC,IAAI,IAAI;MACvB,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,KAAK,QAAQ;MACpC,MAAMC,WAAW,GAAGF,KAAK,GAAG,YAAY,GAAG,YAAY;MACvD,MAAMG,IAAI,GAAGH,KAAK,GAAG,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;MAC7D,MAAMC,IAAI,GAAG,IAAInB,IAAI,CAAC,CAAC,CAACoB,kBAAkB,CAAC,OAAO,EAAE;QAClDC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,OAAO,GAAGV,WAAW,iBAAiBC,IAAI,CAACd,QAAQ,CAAC,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAAC,IAAIN,IAAI,IAAIR,IAAI,CAACe,IAAI,GAAGd,KAAK,GAAG,GAAG,GAAG,EAAE,EAAE;IAC7G,CAAC,CAAC,CAACe,IAAI,CAAC,IAAI,CAAC;EACf,CAAC,MAAM;IACL;IACA,OAAO9D,KAAK,CAAC6C,GAAG,CAACC,IAAI,IAAI;MACvB,OAAOA,IAAI,CAACE,IAAI,KAAK,QAAQ,GAAG,GAAGF,IAAI,CAACe,IAAI,GAAG,GAAGf,IAAI,CAACe,IAAI;IAC7D,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS3C,UAAUA,CAACT,IAAI,EAAEF,UAAU,EAAE;EACpC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB;IACA,OAAO;MAAEG,MAAM,EAAE,EAAE;MAAED,YAAY,EAAE;IAAG,CAAC;EACzC;EAEA,MAAMgD,MAAM,GAAGrD,IAAI,CAAC,CAAC,CAAC;EAEtB,IAAIqD,MAAM,KAAK,IAAI,EAAE;IACnB;IACA,IAAI,CAACvD,UAAU,IAAI,CAACA,UAAU,CAACmC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC5C,OAAO;QAAE3B,MAAM,EAAE,EAAE;QAAED,YAAY,EAAE;MAAG,CAAC;IACzC;IAEA,MAAMiD,MAAM,GAAGxD,UAAU,CAACyD,SAAS,CAAC,CAAC,EAAEzD,UAAU,CAAC0D,WAAW,CAAC,GAAG,CAAC,CAAC;IACnE,OAAO;MAAElD,MAAM,EAAE,EAAE;MAAED,YAAY,EAAEiD;IAAO,CAAC;EAC7C;EAEA,IAAID,MAAM,KAAK,GAAG,EAAE;IAClB;IACA,OAAO;MAAE/C,MAAM,EAAE,EAAE;MAAED,YAAY,EAAEP;IAAW,CAAC;EACjD;EAEA,IAAIuD,MAAM,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;IAC1B;IACA,MAAMH,MAAM,GAAGD,MAAM,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpC;IACA,IAAIG,eAAe,CAACJ,MAAM,CAAC,EAAE;MAC3B,OAAO;QAAEhD,MAAM,EAAE,EAAE;QAAED,YAAY,EAAEiD;MAAO,CAAC;IAC7C,CAAC,MAAM;MACL,OAAO;QACLhD,MAAM,EAAE,OAAO+C,MAAM,6BAA6B;QAClDhD,YAAY,EAAEP;MAChB,CAAC;IACH;EACF;;EAEA;EACA,MAAMwD,MAAM,GAAGxD,UAAU,GAAG,GAAGA,UAAU,IAAIuD,MAAM,EAAE,GAAGA,MAAM;;EAE9D;EACA,IAAIK,eAAe,CAACJ,MAAM,CAAC,EAAE;IAC3B,OAAO;MAAEhD,MAAM,EAAE,EAAE;MAAED,YAAY,EAAEiD;IAAO,CAAC;EAC7C,CAAC,MAAM;IACL,OAAO;MACLhD,MAAM,EAAE,OAAO+C,MAAM,6BAA6B;MAClDhD,YAAY,EAAEP;IAChB,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASY,WAAWA,CAACZ,UAAU,EAAE;EAC/B,OAAOA,UAAU,GAAG,IAAIA,UAAU,EAAE,GAAG,GAAG;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,WAAWA,CAACX,IAAI,EAAEF,UAAU,EAAE;EACrC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,2BAA2B;EACpC;EAEA,MAAMwD,QAAQ,GAAG3D,IAAI,CAAC,CAAC,CAAC;EACxB,MAAM4D,IAAI,GAAGC,eAAe,CAACF,QAAQ,EAAE7D,UAAU,CAAC;;EAElD;EACA,IAAI+B,UAAU,CAAC+B,IAAI,CAAC,EAAE;IACpB,OAAOE,kBAAkB,CAACF,IAAI,CAAC;EACjC,CAAC,MAAM;IACL,OAAO,QAAQD,QAAQ,6BAA6B;EACtD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS9C,aAAaA,CAACb,IAAI,EAAEF,UAAU,EAAE;EACvC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,wBAAwB;EACjC;;EAEA;EACA;EACA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,WAAWA,CAACpB,IAAI,EAAEF,UAAU,EAAE;EACrC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,sBAAsB;EAC/B;EAEA,MAAM4D,UAAU,GAAG/D,IAAI,CAAC,CAAC,CAAC;EAE1B,QAAQ+D,UAAU;IAChB,KAAK,OAAO;MACV,OAAO,iMAAiM;IAE1M,KAAK,MAAM;MACT,OAAO,sLAAsL;IAE/L,KAAK,OAAO;MACV,OAAO,+LAA+L;IAExM,KAAK,SAAS;MACZ,MAAMC,WAAW,GAAGhE,IAAI,CAACG,MAAM,GAAG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;MAClD,IAAIgE,WAAW,EAAE;QACf,OAAO,KAAKA,WAAW,wDAAwD;MACjF,CAAC,MAAM;QACL,OAAO,4BAA4B;MACrC;IAEF;MACE,OAAO,wBAAwBD,UAAU,EAAE;EAC/C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASzC,UAAUA,CAACtB,IAAI,EAAEF,UAAU,EAAE;EACpC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,qBAAqB;EAC9B;EAEA,MAAM4D,UAAU,GAAG/D,IAAI,CAAC,CAAC,CAAC;EAE1B,QAAQ+D,UAAU;IAChB,KAAK,IAAI;MACP,IAAI/D,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;QACnB,OAAO,2BAA2B;MACpC;MAEA,MAAM8D,YAAY,GAAGjE,IAAI,CAAC,CAAC,CAAC;MAE5B,QAAQiE,YAAY;QAClB,KAAK,MAAM;UACT,OAAO,uKAAuK;QAEhL,KAAK,QAAQ;UACX,OAAO,uIAAuI;QAEhJ;UACE,OAAO,0BAA0BA,YAAY,EAAE;MACnD;IAEF,KAAK,OAAO;MACV,OAAO,4JAA4J;IAErK;MACE,OAAO,uBAAuBF,UAAU,EAAE;EAC9C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASxC,WAAWA,CAACvB,IAAI,EAAEF,UAAU,EAAE;EACrC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,sBAAsB;EAC/B;EAEA,MAAM4D,UAAU,GAAG/D,IAAI,CAAC,CAAC,CAAC;EAE1B,QAAQ+D,UAAU;IAChB,KAAK,QAAQ;MACX,OAAO,iZAAiZ;IAE1Z,KAAK,KAAK;MACR,OAAO,EAAE;IAEX,KAAK,QAAQ;MACX,OAAO,iHAAiH;IAE1H,KAAK,MAAM;MACT,OAAO,iZAAiZ;IAE1Z,KAAK,KAAK;MACR,OAAO,0TAA0T;IAEnU,KAAK,QAAQ;MACX,OAAO,mDAAmD;IAE5D,KAAK,UAAU;MACb,MAAMG,UAAU,GAAGlE,IAAI,CAACG,MAAM,GAAG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM;MACrD,OAAO,uBAAuBkE,UAAU,GAAG;IAE7C;MACE,OAAO,wBAAwBH,UAAU,EAAE;EAC/C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS9D,gBAAgBA,CAACkE,WAAW,EAAE;EACrC,MAAMnE,IAAI,GAAG,EAAE;EACf,IAAIoE,UAAU,GAAG,EAAE;EACnB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,SAAS,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAAChE,MAAM,EAAEoE,CAAC,EAAE,EAAE;IAC3C,MAAMC,IAAI,GAAGL,WAAW,CAACI,CAAC,CAAC;IAE3B,IAAI,CAACC,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,MAAM,CAACH,OAAO,IAAIC,SAAS,KAAKE,IAAI,CAAC,EAAE;MACtE,IAAIH,OAAO,EAAE;QACXA,OAAO,GAAG,KAAK;QACfC,SAAS,GAAG,EAAE;MAChB,CAAC,MAAM;QACLD,OAAO,GAAG,IAAI;QACdC,SAAS,GAAGE,IAAI;MAClB;MACA;IACF;IAEA,IAAIA,IAAI,KAAK,GAAG,IAAI,CAACH,OAAO,EAAE;MAC5B,IAAID,UAAU,EAAE;QACdpE,IAAI,CAACyE,IAAI,CAACL,UAAU,CAAC;QACrBA,UAAU,GAAG,EAAE;MACjB;MACA;IACF;IAEAA,UAAU,IAAII,IAAI;EACpB;EAEA,IAAIJ,UAAU,EAAE;IACdpE,IAAI,CAACyE,IAAI,CAACL,UAAU,CAAC;EACvB;EAEA,OAAOpE,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASmB,YAAYA,CAACnB,IAAI,EAAE;EAC1B;EACA,OAAOA,IAAI,CAAC0E,KAAK,CAAC,CAAC,CAAC,CAACtB,IAAI,CAAC,GAAG,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASxC,aAAaA,CAACZ,IAAI,EAAEF,UAAU,EAAE;EACvC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,6BAA6B;EACtC;;EAEA;EACA;EACA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,UAAUA,CAACd,IAAI,EAAEF,UAAU,EAAE;EACpC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,qBAAqB;EAC9B;EAEA,MAAMwE,WAAW,GAAG3E,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC,IAAIjC,IAAI,CAACiC,QAAQ,CAAC,KAAK,CAAC,IAAIjC,IAAI,CAACiC,QAAQ,CAAC,KAAK,CAAC;EACvF,MAAM2C,OAAO,GAAG5E,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC,IAAIjC,IAAI,CAACiC,QAAQ,CAAC,KAAK,CAAC,IAAIjC,IAAI,CAACiC,QAAQ,CAAC,KAAK,CAAC;;EAEnF;EACA,MAAM4C,OAAO,GAAG7E,IAAI,CAAC0E,KAAK,CAAC,CAAC,CAAC,CAACI,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACtB,UAAU,CAAC,GAAG,CAAC,CAAC;EAEjE,IAAIoB,OAAO,CAAC1E,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,qBAAqB;EAC9B;;EAEA;EACA;;EAEA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,UAAUA,CAACf,IAAI,EAAEF,UAAU,EAAE;EACpC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,0BAA0B;EACnC;EAEA,MAAMwE,WAAW,GAAG3E,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC,IAAIjC,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC;;EAE9D;EACA,MAAM+C,MAAM,GAAGhF,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;EACpC,MAAM8E,WAAW,GAAGjF,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;;EAEzC;EACA;;EAEA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,UAAUA,CAAChB,IAAI,EAAEF,UAAU,EAAE;EACpC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,0BAA0B;EACnC;;EAEA;EACA,MAAM6E,MAAM,GAAGhF,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;EACpC,MAAM8E,WAAW,GAAGjF,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;;EAEzC;EACA;;EAEA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,YAAYA,CAACjB,IAAI,EAAEF,UAAU,EAAE;EACtC;EACA;;EAEA,IAAI8D,IAAI,GAAG,GAAG;EACd,IAAIsB,OAAO,GAAG,IAAI;;EAElB;EACA,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvE,IAAI,CAACG,MAAM,EAAEoE,CAAC,EAAE,EAAE;IACpC,IAAIvE,IAAI,CAACuE,CAAC,CAAC,KAAK,OAAO,IAAIA,CAAC,GAAG,CAAC,GAAGvE,IAAI,CAACG,MAAM,EAAE;MAC9C+E,OAAO,GAAGlF,IAAI,CAACuE,CAAC,GAAG,CAAC,CAAC;MACrBA,CAAC,EAAE,CAAC,CAAC;IACP,CAAC,MAAM,IAAI,CAACvE,IAAI,CAACuE,CAAC,CAAC,CAACd,UAAU,CAAC,GAAG,CAAC,IAAIc,CAAC,KAAK,CAAC,EAAE;MAC9CX,IAAI,GAAG5D,IAAI,CAACuE,CAAC,CAAC;IAChB;EACF;EAEA,IAAI,CAACW,OAAO,EAAE;IACZ,OAAO,yBAAyB;EAClC;;EAEA;EACAA,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;;EAE7C;EACA,MAAMC,YAAY,GAAGF,OAAO,CACzBC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CACpBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAEtB,MAAME,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAIF,YAAY,GAAG,CAAC;;EAE7C;EACA,MAAMG,UAAU,GAAG3B,IAAI,KAAK,GAAG,GAAG9D,UAAU,GAAG+D,eAAe,CAACD,IAAI,EAAE9D,UAAU,CAAC;;EAEhF;EACA;;EAEA;EACA,MAAM0F,OAAO,GAAG,EAAE;EAClB,MAAMlG,KAAK,GAAG4C,kBAAkB,CAACqD,UAAU,CAAC;EAE5C,KAAK,MAAMnD,IAAI,IAAI9C,KAAK,EAAE;IACxB,IAAI+F,KAAK,CAACI,IAAI,CAACrD,IAAI,CAACe,IAAI,CAAC,EAAE;MACzBqC,OAAO,CAACf,IAAI,CAAC,GAAGc,UAAU,GAAGA,UAAU,GAAG,GAAG,GAAG,EAAE,GAAGnD,IAAI,CAACe,IAAI,EAAE,CAAC;IACnE;EACF;EAEA,OAAOqC,OAAO,CAACrF,MAAM,GAAG,CAAC,GAAGqF,OAAO,CAACpC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASlC,YAAYA,CAAClB,IAAI,EAAEF,UAAU,EAAE;EACtC,IAAIE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,uBAAuB;EAChC;EAEA,MAAM+E,OAAO,GAAGlF,IAAI,CAAC,CAAC,CAAC;EACvB,MAAM0F,SAAS,GAAG1F,IAAI,CAAC0E,KAAK,CAAC,CAAC,CAAC;;EAE/B;EACA;;EAEA,MAAMiB,OAAO,GAAG,EAAE;EAElB,KAAK,MAAMC,QAAQ,IAAIF,SAAS,EAAE;IAChC,MAAM9B,IAAI,GAAGC,eAAe,CAAC+B,QAAQ,EAAE9F,UAAU,CAAC;IAElD,IAAI+B,UAAU,CAAC+B,IAAI,CAAC,EAAE;MACpB,MAAMiC,OAAO,GAAG/B,kBAAkB,CAACF,IAAI,CAAC;MACxC,MAAMkC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,IAAI,CAAC;MAEjC,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuB,KAAK,CAAC3F,MAAM,EAAEoE,CAAC,EAAE,EAAE;QACrC,IAAIuB,KAAK,CAACvB,CAAC,CAAC,CAACtC,QAAQ,CAACiD,OAAO,CAAC,EAAE;UAC9BS,OAAO,CAAClB,IAAI,CAAC,GAAGmB,QAAQ,IAAIrB,CAAC,GAAG,CAAC,KAAKuB,KAAK,CAACvB,CAAC,CAAC,EAAE,CAAC;QACnD;MACF;IACF,CAAC,MAAM;MACLoB,OAAO,CAAClB,IAAI,CAAC,SAASmB,QAAQ,6BAA6B,CAAC;IAC9D;EACF;EAEA,OAAOD,OAAO,CAACvC,IAAI,CAAC,IAAI,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS5B,UAAUA,CAACxB,IAAI,EAAE;EACxB,MAAMgG,MAAM,GAAG,6BAA6B;EAC5C,MAAMC,SAAS,GAAG,CAChB,8BAA8B,EAC9B,6BAA6B,EAC7B,8BAA8B,EAC9B,4BAA4B,CAC7B;EAED,OAAO,CAACD,MAAM,EAAE,GAAGC,SAAS,CAAC,CAAC7C,IAAI,CAAC,IAAI,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS/B,YAAYA,CAACrB,IAAI,EAAEF,UAAU,EAAE;EACtC,IAAIE,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO,kEAAkE;EAC3E;EAEA,MAAM+F,UAAU,GAAGlG,IAAI,CAAC,CAAC,CAAC;EAC1B,MAAM4D,IAAI,GAAGC,eAAe,CAACqC,UAAU,EAAEpG,UAAU,CAAC;EAEpD,IAAI+B,UAAU,CAAC+B,IAAI,CAAC,EAAE;IACpB,OAAO,0CAA0CsC,UAAU,EAAE;EAC/D,CAAC,MAAM;IACL,OAAO,8BAA8BA,UAAU,GAAG;EACpD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAStE,WAAWA,CAAC5B,IAAI,EAAE;EACzB,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO,+BAA+B;EACxC;EAEA,MAAMX,OAAO,GAAGQ,IAAI,CAAC,CAAC,CAAC;EAEvB,MAAMmG,QAAQ,GAAG;IACf,IAAI,EAAE,sPAAsP;IAC5P,IAAI,EAAE,yNAAyN;IAC/N,KAAK,EAAE,sPAAsP;IAC7P,OAAO,EAAE,2OAA2O;IACpP,OAAO,EAAE,8PAA8P;IACvQ,IAAI,EAAE,kNAAkN;IACxN,IAAI,EAAE,+OAA+O;IACrP,IAAI,EAAE,sOAAsO;IAC5O,MAAM,EAAE,mPAAmP;IAC3P,MAAM,EAAE,wOAAwO;IAChP,MAAM,EAAE,mOAAmO;IAC3O,KAAK,EAAE;EACT,CAAC;EAED,OAAOA,QAAQ,CAAC3G,OAAO,CAAC,IAAI,uBAAuBA,OAAO,EAAE;AAC9D;AAEA,SAASmC,WAAWA,CAAA,EAAG;EACrB,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC9B,IAAI,CAAC,CAAC;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS6D,eAAeA,CAACE,IAAI,EAAE;EAC7B;EACA;;EAEA,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI,CAAC,CAAC;;EAExB,MAAMwC,SAAS,GAAG,CAChB,KAAK,EACL,gBAAgB,EAChB,cAAc,EACd,QAAQ,EACR,cAAc,CACf;EAED,OAAOA,SAAS,CAACnE,QAAQ,CAAC2B,IAAI,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS/B,UAAUA,CAAC+B,IAAI,EAAE;EACxB;EACA;;EAEA,MAAMyC,UAAU,GAAG,CACjB,cAAc,EACd,WAAW,EACX,cAAc,EACd,YAAY,EACZ,eAAe,EACf,8BAA8B,EAC9B,8BAA8B,EAC9B,4BAA4B,EAC5B,6BAA6B,EAC7B,iCAAiC,EACjC,mBAAmB,CACpB;EAED,OAAOA,UAAU,CAACpE,QAAQ,CAAC2B,IAAI,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACF,QAAQ,EAAE7D,UAAU,EAAE;EAC7C,IAAI6D,QAAQ,CAACF,UAAU,CAAC,GAAG,CAAC,EAAE;IAC5B;IACA,OAAOE,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,MAAM;IACL;IACA,OAAOzD,UAAU,GAAG,GAAGA,UAAU,IAAI6D,QAAQ,EAAE,GAAGA,QAAQ;EAC5D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASzB,kBAAkBA,CAACoE,SAAS,EAAE;EACrC;EACA,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,CACL;MAAEnD,IAAI,EAAE,QAAQ;MAAEb,IAAI,EAAE;IAAS,CAAC,EAClC;MAAEa,IAAI,EAAE,KAAK;MAAEb,IAAI,EAAE;IAAS,CAAC,EAC/B;MAAEa,IAAI,EAAE,cAAc;MAAEb,IAAI,EAAE;IAAO,CAAC,EACtC;MAAEa,IAAI,EAAE,WAAW;MAAEb,IAAI,EAAE;IAAO,CAAC,EACnC;MAAEa,IAAI,EAAE,cAAc;MAAEb,IAAI,EAAE;IAAS,CAAC,CACzC;EACH;;EAEA;EACA,IAAIgE,SAAS,KAAK,KAAK,EAAE;IACvB,OAAO,CACL;MAAEnD,IAAI,EAAE,YAAY;MAAEb,IAAI,EAAE;IAAS,CAAC,EACtC;MAAEa,IAAI,EAAE,UAAU;MAAEb,IAAI,EAAE;IAAS,CAAC,EACpC;MAAEa,IAAI,EAAE,QAAQ;MAAEb,IAAI,EAAE;IAAO,CAAC,EAChC;MAAEa,IAAI,EAAE,UAAU;MAAEb,IAAI,EAAE;IAAO,CAAC,EAClC;MAAEa,IAAI,EAAE,WAAW;MAAEb,IAAI,EAAE;IAAO,CAAC,CACpC;EACH;;EAEA;EACA,IAAIgE,SAAS,KAAK,gBAAgB,EAAE;IAClC,OAAO,CACL;MAAEnD,IAAI,EAAE,eAAe;MAAEb,IAAI,EAAE;IAAO,CAAC,EACvC;MAAEa,IAAI,EAAE,eAAe;MAAEb,IAAI,EAAE;IAAO,CAAC,EACvC;MAAEa,IAAI,EAAE,aAAa;MAAEb,IAAI,EAAE;IAAO,CAAC,CACtC;EACH;;EAEA;EACA,IAAIgE,SAAS,KAAK,cAAc,EAAE;IAChC,OAAO,CACL;MAAEnD,IAAI,EAAE,gBAAgB;MAAEb,IAAI,EAAE;IAAO,CAAC,EACxC;MAAEa,IAAI,EAAE,oBAAoB;MAAEb,IAAI,EAAE;IAAO,CAAC,CAC7C;EACH;;EAEA;EACA,IAAIgE,SAAS,KAAK,QAAQ,EAAE;IAC1B,OAAO,CACL;MAAEnD,IAAI,EAAE,YAAY;MAAEb,IAAI,EAAE;IAAO,CAAC,CACrC;EACH;;EAEA;EACA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwB,kBAAkBA,CAAC8B,QAAQ,EAAE;EACpC,MAAMW,YAAY,GAAG;IACnB,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,WAAW,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wEAAwE;IACpE,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACC,mBAAmB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC;;EAED;EACA,OAAOA,YAAY,CAACX,QAAQ,CAAC,IAAI,kBAAkBA,QAAQ,wBAAwB;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}