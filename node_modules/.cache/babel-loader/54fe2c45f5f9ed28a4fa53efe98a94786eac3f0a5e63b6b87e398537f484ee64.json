{"ast":null,"code":"/**\n * Terminal Service\n * \n * This module provides functions to interact with a simulated shell.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll simulate shell commands and responses.\n */\n\n// Base directory for the file system - should match what's used in fileService\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n/**\n * Execute a shell command\n * @param {string} command - Command to execute\n * @param {string} currentDirectory - Current working directory\n * @returns {Promise<{output: string, newDirectory: string}>} - Command output and new working directory\n */\nexport const executeCommand = async (command, currentDirectory = '') => {\n  // In a real implementation, this would call a backend API\n  // For demo purposes, we'll simulate responses to common commands\n\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  // Trim command\n  command = command.trim();\n\n  // Determine the full path of the current directory\n  const workingDir = currentDirectory || '';\n  const fullPath = workingDir ? `${BASE_DIRECTORY}/${workingDir}` : BASE_DIRECTORY;\n\n  // Parse command and arguments\n  const args = command.split(' ');\n  const cmd = args[0].toLowerCase();\n\n  // Track the new directory (changes if cd is used)\n  let newDirectory = currentDirectory;\n\n  // Simulate command execution\n  let output = '';\n  try {\n    // Handle different commands\n    switch (cmd) {\n      case 'ls':\n        output = simulateLS(args, workingDir);\n        break;\n      case 'cd':\n        const result = simulateCD(args, workingDir);\n        output = result.output;\n        newDirectory = result.newDirectory;\n        break;\n      case 'pwd':\n        output = simulatePWD(workingDir);\n        break;\n      case 'cat':\n        output = simulateCAT(args, workingDir);\n        break;\n      case 'echo':\n        output = args.slice(1).join(' ');\n        break;\n      case 'mkdir':\n        output = simulateMKDIR(args, workingDir);\n        break;\n      case 'npm':\n        output = simulateNPM(args, workingDir);\n        break;\n      case 'gh':\n        output = simulateGH(args, workingDir);\n        break;\n      case 'git':\n        output = simulateGit(args, workingDir);\n        break;\n      case 'help':\n        output = getHelpText();\n        break;\n      case 'clear':\n        // The clear command returns a special signal to clear the terminal\n        return {\n          output: 'CLEAR_TERMINAL',\n          newDirectory\n        };\n      case '':\n        // Empty command, do nothing\n        output = '';\n        break;\n      default:\n        output = `Command not found: ${cmd}\\nType 'help' to see available commands.`;\n    }\n  } catch (error) {\n    output = `Error: ${error.message}`;\n  }\n  return {\n    output,\n    newDirectory\n  };\n};\n\n/**\n * Simulate the 'ls' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateLS(args, workingDir) {\n  // Check for -l flag\n  const isLongFormat = args.includes('-l');\n\n  // Get mock file listing based on the current directory\n  const files = getMockFileListing(workingDir);\n  if (isLongFormat) {\n    // Format like a real ls -l command\n    return files.map(file => {\n      const isDir = file.type === 'folder';\n      const permissions = isDir ? 'drwxr-xr-x' : '-rw-r--r--';\n      const size = isDir ? 4096 : Math.floor(Math.random() * 10000);\n      const date = new Date().toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      return `${permissions} 1 user group ${size.toString().padStart(6)} ${date} ${file.name}${isDir ? '/' : ''}`;\n    }).join('\\n');\n  } else {\n    // Simple format\n    return files.map(file => {\n      return file.type === 'folder' ? `${file.name}/` : file.name;\n    }).join('  ');\n  }\n}\n\n/**\n * Simulate the 'cd' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {{output: string, newDirectory: string}} - Command output and new working directory\n */\nfunction simulateCD(args, workingDir) {\n  if (args.length < 2) {\n    // cd without arguments goes to home directory\n    return {\n      output: '',\n      newDirectory: ''\n    };\n  }\n  const target = args[1];\n  if (target === '..') {\n    // Go up one directory\n    if (!workingDir || !workingDir.includes('/')) {\n      return {\n        output: '',\n        newDirectory: ''\n      };\n    }\n    const newDir = workingDir.substring(0, workingDir.lastIndexOf('/'));\n    return {\n      output: '',\n      newDirectory: newDir\n    };\n  }\n  if (target === '.') {\n    // Stay in current directory\n    return {\n      output: '',\n      newDirectory: workingDir\n    };\n  }\n  if (target.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    const newDir = target.substring(1); // Remove leading slash\n\n    // Check if directory exists\n    if (directoryExists(newDir)) {\n      return {\n        output: '',\n        newDirectory: newDir\n      };\n    } else {\n      return {\n        output: `cd: ${target}: No such file or directory`,\n        newDirectory: workingDir\n      };\n    }\n  }\n\n  // Relative path\n  const newDir = workingDir ? `${workingDir}/${target}` : target;\n\n  // Check if directory exists\n  if (directoryExists(newDir)) {\n    return {\n      output: '',\n      newDirectory: newDir\n    };\n  } else {\n    return {\n      output: `cd: ${target}: No such file or directory`,\n      newDirectory: workingDir\n    };\n  }\n}\n\n/**\n * Simulate the 'pwd' command\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulatePWD(workingDir) {\n  return workingDir ? `/${workingDir}` : '/';\n}\n\n/**\n * Simulate the 'cat' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCAT(args, workingDir) {\n  if (args.length < 2) {\n    return 'cat: missing file operand';\n  }\n  const filename = args[1];\n  const path = resolveFilePath(filename, workingDir);\n\n  // Check if file exists\n  if (fileExists(path)) {\n    return getMockFileContent(path);\n  } else {\n    return `cat: ${filename}: No such file or directory`;\n  }\n}\n\n/**\n * Simulate the 'mkdir' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMKDIR(args, workingDir) {\n  if (args.length < 2) {\n    return 'mkdir: missing operand';\n  }\n\n  // In a real implementation, this would create the directory\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'npm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNPM(args, workingDir) {\n  if (args.length < 2) {\n    return 'npm: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'start':\n      return 'Starting development server...\\n\\nCompiled successfully!\\n\\nYou can now view the app in the browser.\\n\\n  Local:            http://localhost:3000\\n  On Your Network:  http://192.168.0.45:3000';\n    case 'test':\n      return 'PASS  src/__tests__/app.test.js\\nPASS  src/__tests__/components.test.js\\n\\nTest Suites: 2 passed, 2 total\\nTests:       7 passed, 7 total\\nSnapshots:   0 total\\nTime:        1.234s';\n    case 'build':\n      return 'Creating an optimized production build...\\nCompiled successfully.\\n\\nFile sizes after gzip:\\n\\n  142.32 KB  build/static/js/main.a1b2c3d4.js\\n  23.45 KB   build/static/css/main.a1b2c3d4.css';\n    case 'install':\n      const packageName = args.length > 2 ? args[2] : '';\n      if (packageName) {\n        return `+ ${packageName}@1.2.3\\nadded 42 packages from 23 contributors in 2.5s`;\n      } else {\n        return 'added 1344 packages in 30s';\n      }\n    default:\n      return `Unknown npm command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'gh' (GitHub CLI) command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGH(args, workingDir) {\n  if (args.length < 2) {\n    return 'gh: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'pr':\n      if (args.length < 3) {\n        return 'gh pr: missing subcommand';\n      }\n      const prSubCommand = args[2];\n      switch (prSubCommand) {\n        case 'list':\n          return 'Showing 2 of 2 open pull requests in username/repo\\n\\n#42  Update documentation  user1  [feature/docs]  1d\\n#41  Fix terminal component  user2  [bugfix/terminal]  2d';\n        case 'create':\n          return 'Creating pull request for feature-branch into main in username/repo\\n\\nPull request created: https://github.com/username/repo/pull/43';\n        default:\n          return `Unknown gh pr command: ${prSubCommand}`;\n      }\n    case 'issue':\n      return 'Showing 3 of 3 open issues in username/repo\\n\\n#39  Improve performance  user1  2d\\n#38  Add test coverage  user2  3d\\n#37  Update dependencies  user3  1w';\n    default:\n      return `Unknown gh command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'git' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGit(args, workingDir) {\n  if (args.length < 2) {\n    return 'git: missing command';\n  }\n  const subCommand = args[1];\n  switch (subCommand) {\n    case 'status':\n      return 'On branch main\\nYour branch is up to date with \\'origin/main\\'.\\n\\nChanges not staged for commit:\\n  (use \"git add <file>...\" to update what will be committed)\\n  (use \"git restore <file>...\" to discard changes in working directory)\\n        modified:   src/components/Terminal.js\\n        modified:   src/components/FileViewer.js\\n\\nno changes added to commit (use \"git add\" and/or \"git commit -a\")';\n    case 'add':\n      return '';\n    case 'commit':\n      return '[main a1b2c3d] Update terminal and file viewer components\\n 2 files changed, 150 insertions(+), 20 deletions(-)';\n    case 'push':\n      return 'Enumerating objects: 7, done.\\nCounting objects: 100% (7/7), done.\\nDelta compression using up to 8 threads\\nCompressing objects: 100% (4/4), done.\\nWriting objects: 100% (4/4), 1.23 KiB | 1.23 MiB/s, done.\\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\\nTo github.com:username/repo.git\\n   a1b2c3d..e4f5g6h  main -> main';\n    case 'log':\n      return 'commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t\\nAuthor: User <user@example.com>\\nDate:   Mon Mar 1 12:34:56 2024 -0800\\n\\n    Update terminal and file viewer components\\n\\ncommit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\\nAuthor: User <user@example.com>\\nDate:   Sun Feb 29 12:34:56 2024 -0800\\n\\n    Initial commit';\n    case 'branch':\n      return '* main\\n  feature/file-viewer\\n  feature/terminal';\n    case 'checkout':\n      const branchName = args.length > 2 ? args[2] : 'main';\n      return `Switched to branch '${branchName}'`;\n    default:\n      return `Unknown git command: ${subCommand}`;\n  }\n}\n\n/**\n * Get help text for available commands\n * @returns {string} - Help text\n */\nfunction getHelpText() {\n  return `\nAvailable commands:\n  ls [options]           List directory contents\n  cd <directory>         Change directory\n  pwd                    Print working directory\n  cat <file>             Show file contents\n  echo <text>            Display a line of text\n  mkdir <directory>      Create directory\n  clear                  Clear the terminal screen\n  \n  git status             Show git status\n  git add <file>         Stage changes\n  git commit -m <msg>    Commit changes\n  git push               Push changes\n  git log                Show commit history\n  git branch             List branches\n  git checkout <branch>  Switch branches\n  \n  npm start              Start development server\n  npm test               Run tests\n  npm build              Build for production\n  npm install [pkg]      Install dependencies\n  \n  gh pr list             List pull requests\n  gh pr create           Create pull request\n  gh issue               List issues\n  \n  help                   Show this help\n`.trim();\n}\n\n/**\n * Check if a directory exists in our mock filesystem\n * @param {string} path - Directory path\n * @returns {boolean} - True if directory exists\n */\nfunction directoryExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common directories in our mock structure\n\n  if (!path) return true; // Root directory\n\n  const validDirs = ['src', 'src/components', 'src/services', 'public', 'node_modules'];\n  return validDirs.includes(path);\n}\n\n/**\n * Check if a file exists in our mock filesystem\n * @param {string} path - File path\n * @returns {boolean} - True if file exists\n */\nfunction fileExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common files in our mock structure\n\n  const validFiles = ['package.json', 'README.md', 'src/index.js', 'src/App.js', 'src/index.css', 'src/components/ChatWindow.js', 'src/components/FileViewer.js', 'src/components/Terminal.js', 'src/services/fileService.js', 'src/services/terminalService.js', 'public/index.html'];\n  return validFiles.includes(path);\n}\n\n/**\n * Resolve a file path based on the current working directory\n * @param {string} filename - File name or path\n * @param {string} workingDir - Current working directory\n * @returns {string} - Resolved file path\n */\nfunction resolveFilePath(filename, workingDir) {\n  if (filename.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    return filename.substring(1); // Remove leading slash\n  } else {\n    // Relative path\n    return workingDir ? `${workingDir}/${filename}` : filename;\n  }\n}\n\n/**\n * Get mock file listing based on directory\n * @param {string} directory - Directory path\n * @returns {Array} - Array of file and directory objects\n */\nfunction getMockFileListing(directory) {\n  // Root directory\n  if (!directory) {\n    return [{\n      name: 'public',\n      type: 'folder'\n    }, {\n      name: 'src',\n      type: 'folder'\n    }, {\n      name: 'package.json',\n      type: 'file'\n    }, {\n      name: 'README.md',\n      type: 'file'\n    }, {\n      name: 'node_modules',\n      type: 'folder'\n    }];\n  }\n\n  // src directory\n  if (directory === 'src') {\n    return [{\n      name: 'components',\n      type: 'folder'\n    }, {\n      name: 'services',\n      type: 'folder'\n    }, {\n      name: 'App.js',\n      type: 'file'\n    }, {\n      name: 'index.js',\n      type: 'file'\n    }, {\n      name: 'index.css',\n      type: 'file'\n    }];\n  }\n\n  // src/components directory\n  if (directory === 'src/components') {\n    return [{\n      name: 'ChatWindow.js',\n      type: 'file'\n    }, {\n      name: 'FileViewer.js',\n      type: 'file'\n    }, {\n      name: 'Terminal.js',\n      type: 'file'\n    }];\n  }\n\n  // src/services directory\n  if (directory === 'src/services') {\n    return [{\n      name: 'fileService.js',\n      type: 'file'\n    }, {\n      name: 'terminalService.js',\n      type: 'file'\n    }];\n  }\n\n  // public directory\n  if (directory === 'public') {\n    return [{\n      name: 'index.html',\n      type: 'file'\n    }];\n  }\n\n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`\n  };\n\n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}","map":{"version":3,"names":["BASE_DIRECTORY","executeCommand","command","currentDirectory","Promise","resolve","setTimeout","trim","workingDir","fullPath","args","split","cmd","toLowerCase","newDirectory","output","simulateLS","result","simulateCD","simulatePWD","simulateCAT","slice","join","simulateMKDIR","simulateNPM","simulateGH","simulateGit","getHelpText","error","message","isLongFormat","includes","files","getMockFileListing","map","file","isDir","type","permissions","size","Math","floor","random","date","Date","toLocaleDateString","month","day","hour","minute","toString","padStart","name","length","target","newDir","substring","lastIndexOf","startsWith","directoryExists","filename","path","resolveFilePath","fileExists","getMockFileContent","subCommand","packageName","prSubCommand","branchName","validDirs","validFiles","directory","filePath","fileContents"],"sources":["/Users/georgeseib/Documents/projects/cc/third/src/services/terminalService.js"],"sourcesContent":["/**\n * Terminal Service\n * \n * This module provides functions to interact with a simulated shell.\n * In a real application, these would make API calls to a backend service.\n * For this demo, we'll simulate shell commands and responses.\n */\n\n// Base directory for the file system - should match what's used in fileService\nconst BASE_DIRECTORY = '/Users/georgeseib/Documents/projects/cc/third';\n\n/**\n * Execute a shell command\n * @param {string} command - Command to execute\n * @param {string} currentDirectory - Current working directory\n * @returns {Promise<{output: string, newDirectory: string}>} - Command output and new working directory\n */\nexport const executeCommand = async (command, currentDirectory = '') => {\n  // In a real implementation, this would call a backend API\n  // For demo purposes, we'll simulate responses to common commands\n\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  // Trim command\n  command = command.trim();\n\n  // Determine the full path of the current directory\n  const workingDir = currentDirectory || '';\n  const fullPath = workingDir ? `${BASE_DIRECTORY}/${workingDir}` : BASE_DIRECTORY;\n\n  // Parse command and arguments\n  const args = command.split(' ');\n  const cmd = args[0].toLowerCase();\n\n  // Track the new directory (changes if cd is used)\n  let newDirectory = currentDirectory;\n\n  // Simulate command execution\n  let output = '';\n\n  try {\n    // Handle different commands\n    switch (cmd) {\n      case 'ls':\n        output = simulateLS(args, workingDir);\n        break;\n      \n      case 'cd':\n        const result = simulateCD(args, workingDir);\n        output = result.output;\n        newDirectory = result.newDirectory;\n        break;\n      \n      case 'pwd':\n        output = simulatePWD(workingDir);\n        break;\n      \n      case 'cat':\n        output = simulateCAT(args, workingDir);\n        break;\n      \n      case 'echo':\n        output = args.slice(1).join(' ');\n        break;\n      \n      case 'mkdir':\n        output = simulateMKDIR(args, workingDir);\n        break;\n      \n      case 'npm':\n        output = simulateNPM(args, workingDir);\n        break;\n      \n      case 'gh':\n        output = simulateGH(args, workingDir);\n        break;\n      \n      case 'git':\n        output = simulateGit(args, workingDir);\n        break;\n      \n      case 'help':\n        output = getHelpText();\n        break;\n      \n      case 'clear':\n        // The clear command returns a special signal to clear the terminal\n        return { output: 'CLEAR_TERMINAL', newDirectory };\n      \n      case '':\n        // Empty command, do nothing\n        output = '';\n        break;\n      \n      default:\n        output = `Command not found: ${cmd}\\nType 'help' to see available commands.`;\n    }\n  } catch (error) {\n    output = `Error: ${error.message}`;\n  }\n\n  return { output, newDirectory };\n};\n\n/**\n * Simulate the 'ls' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateLS(args, workingDir) {\n  // Check for -l flag\n  const isLongFormat = args.includes('-l');\n  \n  // Get mock file listing based on the current directory\n  const files = getMockFileListing(workingDir);\n  \n  if (isLongFormat) {\n    // Format like a real ls -l command\n    return files.map(file => {\n      const isDir = file.type === 'folder';\n      const permissions = isDir ? 'drwxr-xr-x' : '-rw-r--r--';\n      const size = isDir ? 4096 : Math.floor(Math.random() * 10000);\n      const date = new Date().toLocaleDateString('en-US', { \n        month: 'short', \n        day: 'numeric', \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n      return `${permissions} 1 user group ${size.toString().padStart(6)} ${date} ${file.name}${isDir ? '/' : ''}`;\n    }).join('\\n');\n  } else {\n    // Simple format\n    return files.map(file => {\n      return file.type === 'folder' ? `${file.name}/` : file.name;\n    }).join('  ');\n  }\n}\n\n/**\n * Simulate the 'cd' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {{output: string, newDirectory: string}} - Command output and new working directory\n */\nfunction simulateCD(args, workingDir) {\n  if (args.length < 2) {\n    // cd without arguments goes to home directory\n    return { output: '', newDirectory: '' };\n  }\n  \n  const target = args[1];\n  \n  if (target === '..') {\n    // Go up one directory\n    if (!workingDir || !workingDir.includes('/')) {\n      return { output: '', newDirectory: '' };\n    }\n    \n    const newDir = workingDir.substring(0, workingDir.lastIndexOf('/'));\n    return { output: '', newDirectory: newDir };\n  }\n  \n  if (target === '.') {\n    // Stay in current directory\n    return { output: '', newDirectory: workingDir };\n  }\n  \n  if (target.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    const newDir = target.substring(1); // Remove leading slash\n    \n    // Check if directory exists\n    if (directoryExists(newDir)) {\n      return { output: '', newDirectory: newDir };\n    } else {\n      return { \n        output: `cd: ${target}: No such file or directory`, \n        newDirectory: workingDir \n      };\n    }\n  }\n  \n  // Relative path\n  const newDir = workingDir ? `${workingDir}/${target}` : target;\n  \n  // Check if directory exists\n  if (directoryExists(newDir)) {\n    return { output: '', newDirectory: newDir };\n  } else {\n    return { \n      output: `cd: ${target}: No such file or directory`, \n      newDirectory: workingDir \n    };\n  }\n}\n\n/**\n * Simulate the 'pwd' command\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulatePWD(workingDir) {\n  return workingDir ? `/${workingDir}` : '/';\n}\n\n/**\n * Simulate the 'cat' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateCAT(args, workingDir) {\n  if (args.length < 2) {\n    return 'cat: missing file operand';\n  }\n  \n  const filename = args[1];\n  const path = resolveFilePath(filename, workingDir);\n  \n  // Check if file exists\n  if (fileExists(path)) {\n    return getMockFileContent(path);\n  } else {\n    return `cat: ${filename}: No such file or directory`;\n  }\n}\n\n/**\n * Simulate the 'mkdir' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateMKDIR(args, workingDir) {\n  if (args.length < 2) {\n    return 'mkdir: missing operand';\n  }\n  \n  // In a real implementation, this would create the directory\n  // For our demo, we'll just pretend it worked\n  return '';\n}\n\n/**\n * Simulate the 'npm' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateNPM(args, workingDir) {\n  if (args.length < 2) {\n    return 'npm: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'start':\n      return 'Starting development server...\\n\\nCompiled successfully!\\n\\nYou can now view the app in the browser.\\n\\n  Local:            http://localhost:3000\\n  On Your Network:  http://192.168.0.45:3000';\n    \n    case 'test':\n      return 'PASS  src/__tests__/app.test.js\\nPASS  src/__tests__/components.test.js\\n\\nTest Suites: 2 passed, 2 total\\nTests:       7 passed, 7 total\\nSnapshots:   0 total\\nTime:        1.234s';\n    \n    case 'build':\n      return 'Creating an optimized production build...\\nCompiled successfully.\\n\\nFile sizes after gzip:\\n\\n  142.32 KB  build/static/js/main.a1b2c3d4.js\\n  23.45 KB   build/static/css/main.a1b2c3d4.css';\n    \n    case 'install':\n      const packageName = args.length > 2 ? args[2] : '';\n      if (packageName) {\n        return `+ ${packageName}@1.2.3\\nadded 42 packages from 23 contributors in 2.5s`;\n      } else {\n        return 'added 1344 packages in 30s';\n      }\n    \n    default:\n      return `Unknown npm command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'gh' (GitHub CLI) command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGH(args, workingDir) {\n  if (args.length < 2) {\n    return 'gh: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'pr':\n      if (args.length < 3) {\n        return 'gh pr: missing subcommand';\n      }\n      \n      const prSubCommand = args[2];\n      \n      switch (prSubCommand) {\n        case 'list':\n          return 'Showing 2 of 2 open pull requests in username/repo\\n\\n#42  Update documentation  user1  [feature/docs]  1d\\n#41  Fix terminal component  user2  [bugfix/terminal]  2d';\n        \n        case 'create':\n          return 'Creating pull request for feature-branch into main in username/repo\\n\\nPull request created: https://github.com/username/repo/pull/43';\n        \n        default:\n          return `Unknown gh pr command: ${prSubCommand}`;\n      }\n    \n    case 'issue':\n      return 'Showing 3 of 3 open issues in username/repo\\n\\n#39  Improve performance  user1  2d\\n#38  Add test coverage  user2  3d\\n#37  Update dependencies  user3  1w';\n    \n    default:\n      return `Unknown gh command: ${subCommand}`;\n  }\n}\n\n/**\n * Simulate the 'git' command\n * @param {string[]} args - Command arguments\n * @param {string} workingDir - Current working directory\n * @returns {string} - Command output\n */\nfunction simulateGit(args, workingDir) {\n  if (args.length < 2) {\n    return 'git: missing command';\n  }\n  \n  const subCommand = args[1];\n  \n  switch (subCommand) {\n    case 'status':\n      return 'On branch main\\nYour branch is up to date with \\'origin/main\\'.\\n\\nChanges not staged for commit:\\n  (use \"git add <file>...\" to update what will be committed)\\n  (use \"git restore <file>...\" to discard changes in working directory)\\n        modified:   src/components/Terminal.js\\n        modified:   src/components/FileViewer.js\\n\\nno changes added to commit (use \"git add\" and/or \"git commit -a\")';\n    \n    case 'add':\n      return '';\n    \n    case 'commit':\n      return '[main a1b2c3d] Update terminal and file viewer components\\n 2 files changed, 150 insertions(+), 20 deletions(-)';\n    \n    case 'push':\n      return 'Enumerating objects: 7, done.\\nCounting objects: 100% (7/7), done.\\nDelta compression using up to 8 threads\\nCompressing objects: 100% (4/4), done.\\nWriting objects: 100% (4/4), 1.23 KiB | 1.23 MiB/s, done.\\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\\nTo github.com:username/repo.git\\n   a1b2c3d..e4f5g6h  main -> main';\n    \n    case 'log':\n      return 'commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t\\nAuthor: User <user@example.com>\\nDate:   Mon Mar 1 12:34:56 2024 -0800\\n\\n    Update terminal and file viewer components\\n\\ncommit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\\nAuthor: User <user@example.com>\\nDate:   Sun Feb 29 12:34:56 2024 -0800\\n\\n    Initial commit';\n    \n    case 'branch':\n      return '* main\\n  feature/file-viewer\\n  feature/terminal';\n    \n    case 'checkout':\n      const branchName = args.length > 2 ? args[2] : 'main';\n      return `Switched to branch '${branchName}'`;\n    \n    default:\n      return `Unknown git command: ${subCommand}`;\n  }\n}\n\n/**\n * Get help text for available commands\n * @returns {string} - Help text\n */\nfunction getHelpText() {\n  return `\nAvailable commands:\n  ls [options]           List directory contents\n  cd <directory>         Change directory\n  pwd                    Print working directory\n  cat <file>             Show file contents\n  echo <text>            Display a line of text\n  mkdir <directory>      Create directory\n  clear                  Clear the terminal screen\n  \n  git status             Show git status\n  git add <file>         Stage changes\n  git commit -m <msg>    Commit changes\n  git push               Push changes\n  git log                Show commit history\n  git branch             List branches\n  git checkout <branch>  Switch branches\n  \n  npm start              Start development server\n  npm test               Run tests\n  npm build              Build for production\n  npm install [pkg]      Install dependencies\n  \n  gh pr list             List pull requests\n  gh pr create           Create pull request\n  gh issue               List issues\n  \n  help                   Show this help\n`.trim();\n}\n\n/**\n * Check if a directory exists in our mock filesystem\n * @param {string} path - Directory path\n * @returns {boolean} - True if directory exists\n */\nfunction directoryExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common directories in our mock structure\n  \n  if (!path) return true; // Root directory\n  \n  const validDirs = [\n    'src',\n    'src/components',\n    'src/services',\n    'public',\n    'node_modules'\n  ];\n  \n  return validDirs.includes(path);\n}\n\n/**\n * Check if a file exists in our mock filesystem\n * @param {string} path - File path\n * @returns {boolean} - True if file exists\n */\nfunction fileExists(path) {\n  // In a real implementation, this would check the actual filesystem\n  // For our demo, we'll allow common files in our mock structure\n  \n  const validFiles = [\n    'package.json',\n    'README.md',\n    'src/index.js',\n    'src/App.js',\n    'src/index.css',\n    'src/components/ChatWindow.js',\n    'src/components/FileViewer.js',\n    'src/components/Terminal.js',\n    'src/services/fileService.js',\n    'src/services/terminalService.js',\n    'public/index.html'\n  ];\n  \n  return validFiles.includes(path);\n}\n\n/**\n * Resolve a file path based on the current working directory\n * @param {string} filename - File name or path\n * @param {string} workingDir - Current working directory\n * @returns {string} - Resolved file path\n */\nfunction resolveFilePath(filename, workingDir) {\n  if (filename.startsWith('/')) {\n    // Absolute path (within our mock filesystem)\n    return filename.substring(1); // Remove leading slash\n  } else {\n    // Relative path\n    return workingDir ? `${workingDir}/${filename}` : filename;\n  }\n}\n\n/**\n * Get mock file listing based on directory\n * @param {string} directory - Directory path\n * @returns {Array} - Array of file and directory objects\n */\nfunction getMockFileListing(directory) {\n  // Root directory\n  if (!directory) {\n    return [\n      { name: 'public', type: 'folder' },\n      { name: 'src', type: 'folder' },\n      { name: 'package.json', type: 'file' },\n      { name: 'README.md', type: 'file' },\n      { name: 'node_modules', type: 'folder' },\n    ];\n  }\n  \n  // src directory\n  if (directory === 'src') {\n    return [\n      { name: 'components', type: 'folder' },\n      { name: 'services', type: 'folder' },\n      { name: 'App.js', type: 'file' },\n      { name: 'index.js', type: 'file' },\n      { name: 'index.css', type: 'file' },\n    ];\n  }\n  \n  // src/components directory\n  if (directory === 'src/components') {\n    return [\n      { name: 'ChatWindow.js', type: 'file' },\n      { name: 'FileViewer.js', type: 'file' },\n      { name: 'Terminal.js', type: 'file' },\n    ];\n  }\n  \n  // src/services directory\n  if (directory === 'src/services') {\n    return [\n      { name: 'fileService.js', type: 'file' },\n      { name: 'terminalService.js', type: 'file' },\n    ];\n  }\n  \n  // public directory\n  if (directory === 'public') {\n    return [\n      { name: 'index.html', type: 'file' },\n    ];\n  }\n  \n  // Default - empty directory or unknown path\n  return [];\n}\n\n/**\n * Get mock file content based on file path\n * @param {string} filePath - Path to the file\n * @returns {string} - File content\n */\nfunction getMockFileContent(filePath) {\n  const fileContents = {\n    'package.json': `{\n  \"name\": \"third\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"description\": \"Web interface with Claude chat, file viewer, and terminal\",\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"^5.0.1\",\n    \"styled-components\": \"^6.1.1\",\n    \"xterm\": \"^5.3.0\",\n    \"xterm-addon-fit\": \"^0.8.0\",\n    \"axios\": \"^1.6.0\"\n  }\n}`,\n    'README.md': `# Claude Web Interface\n\nA web interface application with three panels for interacting with Claude:\n\n- **Left Panel**: Chat interface for conversing with Claude\n- **Upper Right Panel**: File viewer for browsing local repository files\n- **Bottom Right Panel**: Terminal for running commands (gh, npm, etc.)`,\n    'src/index.js': `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);`,\n    'public/index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Claude Web Interface</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>`,\n  };\n  \n  // Return the content if it exists, otherwise return a placeholder\n  return fileContents[filePath] || `// Content for ${filePath} not available in demo`;\n}"],"mappings":"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,IAAI,EAAE;IAAO,CAAC,EACxC;MAAEe,IAAI,EAAE,oBAAoB;MAAEf,IAAI,EAAE;IAAO,CAAC,CAC7C;EACH;;EAEA;EACA,IAAIkC,SAAS,KAAK,QAAQ,EAAE;IAC1B,OAAO,CACL;MAAEnB,IAAI,EAAE,YAAY;MAAEf,IAAI,EAAE;IAAO,CAAC,CACrC;EACH;;EAEA;EACA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS2B,kBAAkBA,CAACQ,QAAQ,EAAE;EACpC,MAAMC,YAAY,GAAG;IACnB,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACE,WAAW,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wEAAwE;IACpE,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACC,mBAAmB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC;;EAED;EACA,OAAOA,YAAY,CAACD,QAAQ,CAAC,IAAI,kBAAkBA,QAAQ,wBAAwB;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}